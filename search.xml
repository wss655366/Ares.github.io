<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[011 或许会美好吧]]></title>
    <url>%2F2017%2F10%2F31%2F011onlyyou%2F</url>
    <content type="text"><![CDATA[+ 始于心动，终于白首，初于花雨，至于天荒！ 反反复复，终于是搭建好了，经过了好多次尝试，总算完整的搭好了博客，希望这次不会再出现一些意想不到的错误吧。 每天，只有这个时候是最心静的，也只有这个时候是属于我自己的，或许我想什么，说什么你都不会知道吧，喜欢你，可是又不想打扰你，不想让你觉得我烦，很矛盾，不想错过你，又不想烦你，总是说顺其自然，但是又怕顺着顺着又没了， 不善于表达，或许会更难吧。 想说陪我走走吧，去哪都行，只要你愿意！想说带你去吃饭，你想吃什么我都给你做，新学的红烧排骨很不错，只要你愿意！想说聊聊天吧，虽然我看了好多套路却一套都没学会，只要你愿意！想说想你了，无论是忙还是闲。 虽然遇到一个自己喜欢和喜欢自己的人很难，但是总该争取的还是要好好争取，望着他人的幸福，徒生向往；注目他人的难处，油然怜悯。他们时而欢笑，时而落泪。因为小事而倍感幸福，因为小事而万分感伤。希望我们还会再相遇吧！]]></content>
      <categories>
        <category>异度空间</category>
      </categories>
      <tags>
        <tag>Encounter</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Golang中的数组]]></title>
    <url>%2F2017%2F10%2F30%2Farray%2F</url>
    <content type="text"><![CDATA[+ 1.数组1.1常见声明：1234[32]byte //长度32的字节数组[2*N] struct &#123;x, y int32&#125; //复杂类型的数组[1000]*float64 //指针数组[3][5]int //int类型的二维数组 1.2元素访问：通过数组下标访问元素。123for i: = 0; i &lt; len(array): i++ &#123;fmt.Println("Element",i,"of array is",array[i])&#125; Go语言还提供了一个关键字range，用于便捷地遍历容器中的元素。123for i, v := range array &#123; fmt.Println("Array element[", i, "]=", v)&#125; 1.3值类型在Go语言中数组是一个值类型，所有的值类型变量在赋值和作为参数传递时都将产生一次复制动作。 如果将数组作为函数的参数类型，则在函数调用时参数将发生复制。 1234567891011package mainimport "fmt"func modify(array [10]int) &#123; array[0] = 10 // 试图修改数组的第一个元素 fmt.Println("In modify(), array values:", array)&#125;func main() &#123; array := [5]int&#123;1,2,3,4,5&#125; // 定义并初始化一个数组 modify(array) // 传递给一个函数，并试图在函数体内修改这个数组内容 fmt.Println("In main(), array values:", array)&#125; 2.数组切片2.1创建数组切片123mySlice1 := make([]int, 5)mySlice2 := make([]int, 5, 10)mySlice3 := []int&#123;1, 2, 3, 4, 5&#125; 2.2元素遍历通过for循环：123for i := 0; i &lt;len(mySlice); i++ &#123; fmt.Println("mySlice[", i, "] =", mySlice[i])&#125; 使用range关键字遍历123for i, v := range mySlice &#123; fmt.Println("mySlice[", i, "] =", v)&#125; 2.3动态增加元素通过内置函数获取切片长度和容量1234567package mainimport "fmt"func main() &#123; mySlice := make([]int, 5, 10) fmt.Println("len(mySlice):", len(mySlice)) fmt.Println("cap(mySlice):", cap(mySlice))&#125; 通过append函数向数组切片中追加元素1234mySlice = append(mySlice, 1, 2, 3)mySlice2 := []int&#123;8, 9, 10&#125;// 给mySlice后面添加另一个数组切片mySlice = append(mySlice, mySlice2...) 2.4基于数组切片创建数组切片12oldSlice := []int&#123;1, 2, 3, 4, 5&#125;newSlice := oldSlice[:3] // 基于oldSlice的前3个元素构建新数组切片 2.5内容复制1234slice1 := []int&#123;1, 2, 3, 4, 5&#125;slice2 := []int&#123;5, 4, 3&#125;copy(slice2, slice1) // 只会复制slice1的前3个元素到slice2中copy(slice1, slice2) // 只会复制slice2的3个元素到slice1的前3个位置 2.6代码示例1234567891011121314151617package mainimport "fmt"func main() &#123; // 先定义一个数组 var myArray [10]int = [10]int&#123;1, 2, 3, 4, 5, 6, 7, 8, 9, 10&#125; // 基于数组创建一个数组切片 var mySlice []int = myArray[:5] fmt.Println("Elements of myArray: ") for _, v := range myArray &#123; fmt.Print(v, " ") &#125; fmt.Println("\nElements of mySlice: ") for _, v := range mySlice &#123; fmt.Print(v, " ") &#125; fmt.Println()&#125; 3.map3.1代码示例123456789101112131415161718192021222324package mainimport "fmt"// PersonInfo是一个包含个人详细信息的类型type PersonInfo struct &#123; ID string Name string Address string&#125;func main() &#123;var personDB map[string] PersonInfo personDB = make(map[string] PersonInfo) // 往这个map里插入几条数据 personDB["12345"] = PersonInfo&#123;"12345", "Tom", "Room 203,..."&#125; personDB["1"] = PersonInfo&#123;"1", "Jack", "Room 101,..."&#125; // 从这个map查找键为"1234"的信息 person, ok := personDB["1234"] // ok是一个返回的bool型，返回true表示找到了对应的数据 if ok &#123; fmt.Println("Found person", person.Name, "with ID 1234.") &#125; else &#123; fmt.Println("Did not find person with ID 1234.") &#125;&#125; 3.2变量声明var myMap map[string] PersonInfo 3.3创建123456// PersonInfohi一个结构体myMap = make(map[string] PersonInfo)创建并初始化map的代码如下：myMap = map[string] PersonInfo&#123; "1234": PersonInfo&#123;"1", "Jack", "Room 101,..."&#125;,&#125; 3.3元素赋值myMap[“1234”] = PersonInfo{“1”, “Jack”, “Room 101,…”} 3.4元素删除delete(myMap, “1234”) 3.5元素查找1234value, ok := myMap["1234"]if ok &#123; // 找到了 // 处理找到的value&#125;]]></content>
      <categories>
        <category>“program”</category>
      </categories>
      <tags>
        <tag>GO</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2017%2F10%2F30%2Fhello-world%2F</url>
    <content type="text"><![CDATA[+ Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
      <tags>
        <tag>First</tag>
      </tags>
  </entry>
</search>
