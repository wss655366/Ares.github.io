<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>零度空间</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-11-06T12:43:52.475Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Ares</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Golang</title>
    <link href="http://yoursite.com/2017/11/06/Golang/"/>
    <id>http://yoursite.com/2017/11/06/Golang/</id>
    <published>2017-11-06T12:40:58.000Z</published>
    <updated>2017-11-06T12:43:52.475Z</updated>
    
    <content type="html"><![CDATA[<p><excerpt in="" index="" |="" 首页摘要=""><br>+<a id="more"></a></excerpt></p><p><the rest="" of="" contents="" |="" 余下全文="">    </the></p><h1 id="1-cache2go简单介绍"><a href="#1-cache2go简单介绍" class="headerlink" title="1.cache2go简单介绍"></a>1.cache2go简单介绍</h1><p>cache2go是一个并发安全，具有心跳功能的缓存库。核心功能只有3个文件。从中可以学习到，go语言中的锁、goroutine、map操作等。主要实现功能是对缓存项设置生命周期，可对一些过期的缓存进行删除（可设置缓存清理周期），也可以进行周期延拓，可以增加、删除、修改、更新缓存项，包含单条缓存和缓存表缓存。</p><h1 id="2-cacheitem中源码分析"><a href="#2-cacheitem中源码分析" class="headerlink" title="2.cacheitem中源码分析"></a>2.cacheitem中源码分析</h1><p>Cacheitemu源码中主要介绍单条缓存，包含创建新的缓存条目，创建时间，上次访问时间，以及被访问的频率。<br>从下图中的从结构体中我们可以看到key与data都是interface{}类型，即可以接收任意类型，但是建议key为可比较的类型。 lifeSpan time.Duration 可设置生命周期，以及创建时间，访问次数等记录，<br><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> cache2go</div><div class="line"></div><div class="line"><span class="keyword">import</span> (</div><div class="line"><span class="string">"sync"</span></div><div class="line"><span class="string">"time"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="keyword">type</span> CacheItem <span class="keyword">struct</span> &#123;</div><div class="line">sync.RWMutex</div><div class="line"></div><div class="line"><span class="comment">// 缓存项的key</span></div><div class="line">key <span class="keyword">interface</span>&#123;&#125;</div><div class="line"><span class="comment">// 缓存项的值</span></div><div class="line">data <span class="keyword">interface</span>&#123;&#125;</div><div class="line"><span class="comment">// 缓存项的生命期</span></div><div class="line">lifeSpan time.Duration</div><div class="line"></div><div class="line"><span class="comment">// 创建时间戳</span></div><div class="line">createdOn time.Time</div><div class="line"><span class="comment">// 上次访问的时间戳</span></div><div class="line">accessedOn time.Time</div><div class="line"><span class="comment">// 被访问的次数</span></div><div class="line">accessCount <span class="keyword">int64</span></div><div class="line"></div><div class="line"><span class="comment">// 缓存项被删除时的回调函数(删之前执行)</span></div><div class="line">aboutToExpire <span class="function"><span class="keyword">func</span><span class="params">(key <span class="keyword">interface</span>&#123;&#125;)</span></span></div><div class="line"><span class="function">&#125;</span></div><div class="line"><span class="function"></span></div><div class="line"><span class="function">//<span class="title">NewCacheItem</span> <span class="title">return</span> <span class="title">a</span> <span class="title">newly</span> <span class="title">created</span> <span class="title">CacheItem</span>.</span></div><div class="line"><span class="function">//<span class="title">Parameter</span> <span class="title">key</span> <span class="title">is</span> <span class="title">the</span> <span class="title">item</span>'<span class="title">s</span> <span class="title">cache</span>-<span class="title">key</span>.</span></div><div class="line"><span class="function">//<span class="title">Parameter</span> <span class="title">lifeSpan</span> <span class="title">determines</span> <span class="title">after</span> <span class="title">which</span> <span class="title">time</span> <span class="title">period</span> <span class="title">without</span> <span class="title">an</span> <span class="title">access</span> <span class="title">the</span> <span class="title">item</span></span></div><div class="line"><span class="function">//<span class="title">will</span> <span class="title">get</span> <span class="title">removed</span> <span class="title">from</span> <span class="title">the</span> <span class="title">cache</span></span></div><div class="line"><span class="function">//<span class="title">Parameter</span> <span class="title">data</span> <span class="title">is</span> <span class="title">the</span> <span class="title">item</span>'<span class="title">s</span> <span class="title">value</span></span></div><div class="line"><span class="function"><span class="title">func</span> <span class="title">NewCacheItem</span><span class="params">(key <span class="keyword">interface</span>&#123;&#125;, lifeSpan time.Duration, data <span class="keyword">interface</span>&#123;&#125;)</span> *<span class="title">CacheItem</span></span> &#123;</div><div class="line">t := time.Now()</div><div class="line"><span class="keyword">return</span> &amp;CacheItem&#123;</div><div class="line">key:           key,</div><div class="line">lifeSpan:      lifeSpan,</div><div class="line">createdOn:     t,</div><div class="line">accessedOn:    t,</div><div class="line">accessCount:   <span class="number">0</span>,</div><div class="line">aboutToExpire: <span class="literal">nil</span>,</div><div class="line">data:          data,</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//keepAlive marks an item to be kept for another expireDuration period</span></div><div class="line"><span class="comment">//KeepAlive将要保留的项目标记为另一个到期时间</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="params">(item *CacheItem)</span> <span class="title">KeepAlive</span><span class="params">()</span></span> &#123;</div><div class="line">item.Lock()</div><div class="line"><span class="keyword">defer</span> item.Unlock()</div><div class="line">item.accessedOn = time.Now()</div><div class="line">item.accessCount++</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//LifeSpan returns this item's expieation duration</span></div><div class="line"><span class="comment">//LifeSpan返回此项目的到期时间</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="params">(item *CacheItem)</span> <span class="title">LifeSpan</span><span class="params">()</span> <span class="title">time</span>.<span class="title">Duration</span></span> &#123;</div><div class="line"><span class="keyword">return</span> item.lifeSpan</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//AccessedOn returns when this item was last accessed.</span></div><div class="line"><span class="comment">//AccessedOn返回上次访问此项目时间</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="params">(item *CacheItem)</span> <span class="title">AccessedOn</span><span class="params">()</span> <span class="title">time</span>.<span class="title">Time</span></span> &#123;</div><div class="line">item.RLock()</div><div class="line"><span class="keyword">defer</span> item.RLock()</div><div class="line"><span class="keyword">return</span> item.accessedOn</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//CreatedOn returns when this item was added to the cache.</span></div><div class="line"><span class="comment">//CreatedOn将此项目添加到缓存时返回  返回添加时间</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="params">(item *CacheItem)</span> <span class="title">CreatedOn</span><span class="params">()</span> <span class="title">time</span>.<span class="title">Time</span></span> &#123;</div><div class="line"><span class="keyword">return</span> item.createdOn</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//AccessCount returns how often this item has been accessed.</span></div><div class="line"><span class="comment">//AccessCount返回此项目被访问的频率</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="params">(item *CacheItem)</span> <span class="title">AccessCount</span><span class="params">()</span> <span class="title">int64</span></span> &#123;</div><div class="line">item.RLock()</div><div class="line"><span class="keyword">defer</span> item.RUnlock()</div><div class="line"><span class="keyword">return</span> item.accessCount</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//Key returns the key of this cached item</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="params">(item *CacheItem)</span> <span class="title">Key</span><span class="params">()</span> <span class="title">interface</span></span>&#123;&#125; &#123;</div><div class="line"><span class="keyword">return</span> item.key</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//Data returns the value of this cached item.</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="params">(item *CacheItem)</span> <span class="title">Data</span><span class="params">()</span> <span class="title">interface</span></span>&#123;&#125; &#123;</div><div class="line"><span class="keyword">return</span> item.data</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//SetAboutToExpireCallback configures a callback, which will be called right</span></div><div class="line"><span class="comment">//before the item is about to be removed from the cache.</span></div><div class="line"><span class="comment">// SetAboutToExpireCallback配置一个回调函数，这将被调用</span></div><div class="line"><span class="comment">//在项目即将从缓存中删除之前。</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="params">(item *CacheItem)</span> <span class="title">SetAboutToExpireCallback</span><span class="params">(f <span class="keyword">func</span>(<span class="keyword">interface</span>&#123;&#125;)</span>)</span> &#123;</div><div class="line">item.Lock()</div><div class="line"><span class="keyword">defer</span> item.Unlock()</div><div class="line">item.aboutToExpire = f</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h1 id="3-cachetable中源码分析"><a href="#3-cachetable中源码分析" class="headerlink" title="3.cachetable中源码分析"></a>3.cachetable中源码分析</h1><p>CacheTable结构如下：<br><br><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div><div class="line">247</div><div class="line">248</div><div class="line">249</div><div class="line">250</div><div class="line">251</div><div class="line">252</div><div class="line">253</div><div class="line">254</div><div class="line">255</div><div class="line">256</div><div class="line">257</div><div class="line">258</div><div class="line">259</div><div class="line">260</div><div class="line">261</div><div class="line">262</div><div class="line">263</div><div class="line">264</div><div class="line">265</div><div class="line">266</div><div class="line">267</div><div class="line">268</div><div class="line">269</div><div class="line">270</div><div class="line">271</div><div class="line">272</div><div class="line">273</div><div class="line">274</div><div class="line">275</div><div class="line">276</div><div class="line">277</div><div class="line">278</div><div class="line">279</div><div class="line">280</div><div class="line">281</div><div class="line">282</div><div class="line">283</div><div class="line">284</div><div class="line">285</div><div class="line">286</div><div class="line">287</div><div class="line">288</div><div class="line">289</div><div class="line">290</div><div class="line">291</div><div class="line">292</div><div class="line">293</div><div class="line">294</div><div class="line">295</div><div class="line">296</div><div class="line">297</div><div class="line">298</div><div class="line">299</div><div class="line">300</div><div class="line">301</div><div class="line">302</div><div class="line">303</div><div class="line">304</div><div class="line">305</div><div class="line">306</div><div class="line">307</div><div class="line">308</div><div class="line">309</div><div class="line">310</div><div class="line">311</div><div class="line">312</div><div class="line">313</div><div class="line">314</div><div class="line">315</div><div class="line">316</div><div class="line">317</div><div class="line">318</div><div class="line">319</div><div class="line">320</div><div class="line">321</div><div class="line">322</div><div class="line">323</div><div class="line">324</div><div class="line">325</div><div class="line">326</div><div class="line">327</div><div class="line">328</div><div class="line">329</div><div class="line">330</div><div class="line">331</div><div class="line">332</div><div class="line">333</div><div class="line">334</div><div class="line">335</div><div class="line">336</div><div class="line">337</div><div class="line">338</div><div class="line">339</div><div class="line">340</div><div class="line">341</div><div class="line">342</div><div class="line">343</div><div class="line">344</div><div class="line">345</div><div class="line">346</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> cache2go</div><div class="line"><span class="keyword">import</span> (</div><div class="line"><span class="string">"log"</span></div><div class="line"><span class="string">"sort"</span></div><div class="line"><span class="string">"sync"</span></div><div class="line"><span class="string">"time"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="comment">// CacheTable is a table within the cache</span></div><div class="line"><span class="keyword">type</span> CacheTable <span class="keyword">struct</span> &#123;</div><div class="line">sync.RWMutex <span class="comment">//读写锁</span></div><div class="line"></div><div class="line"><span class="comment">// 缓存表名</span></div><div class="line">name <span class="keyword">string</span></div><div class="line"><span class="comment">// 缓存项</span></div><div class="line">items <span class="keyword">map</span>[<span class="keyword">interface</span>&#123;&#125;]*CacheItem</div><div class="line"></div><div class="line"><span class="comment">// 触发缓存清理的定时器</span></div><div class="line">cleanupTimer *time.Timer</div><div class="line"><span class="comment">// 缓存清理周期</span></div><div class="line">cleanupInterval time.Duration</div><div class="line"></div><div class="line"><span class="comment">// 该缓存表的日志</span></div><div class="line">logger *log.Logger</div><div class="line"></div><div class="line"><span class="comment">// 获取一个不存在的缓存项时的回调函数</span></div><div class="line">loadData <span class="function"><span class="keyword">func</span><span class="params">(key <span class="keyword">interface</span>&#123;&#125;, args ...<span class="keyword">interface</span>&#123;&#125;)</span> *<span class="title">CacheItem</span></span></div><div class="line"><span class="function">//向缓存表增加缓存项时的回调函数</span></div><div class="line"><span class="function"><span class="title">addedItem</span> <span class="title">func</span><span class="params">(item *CacheItem)</span></span></div><div class="line"><span class="function">// 从缓存表删除一个缓存项时的回调函数</span></div><div class="line"><span class="function"><span class="title">aboutToDeleteItem</span> <span class="title">func</span><span class="params">(item *CacheItem)</span></span></div><div class="line"><span class="function">&#125;</span></div><div class="line"><span class="function"></span></div><div class="line"><span class="function">// <span class="title">Count</span> <span class="title">returns</span> <span class="title">how</span> <span class="title">many</span> <span class="title">items</span> <span class="title">are</span> <span class="title">currently</span> <span class="title">stored</span> <span class="title">in</span> <span class="title">the</span> <span class="title">cache</span>.</span></div><div class="line"><span class="function">//返回缓存中存储有多少项</span></div><div class="line"><span class="function"><span class="title">func</span> <span class="params">(table *CacheTable)</span> <span class="title">Count</span><span class="params">()</span> <span class="title">int</span></span> &#123;</div><div class="line"><span class="comment">//允许同一时间多个线程对变量进行读操作，但是只能一个线程进行写操作</span></div><div class="line">table.RLock()</div><div class="line"><span class="keyword">defer</span> table.RUnlock()</div><div class="line"><span class="keyword">return</span> <span class="built_in">len</span>(table.items)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// Foreach all items 所有项目</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="params">(table *CacheTable)</span> <span class="title">Foreach</span><span class="params">(trans <span class="keyword">func</span>(key <span class="keyword">interface</span>&#123;&#125;, item *CacheItem)</span>)</span> &#123;</div><div class="line">table.RLock()</div><div class="line"><span class="keyword">defer</span> table.RUnlock()</div><div class="line"></div><div class="line"><span class="keyword">for</span> k, v := <span class="keyword">range</span> table.items &#123;</div><div class="line">trans(k, v)</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// SetDataLoader configures a data-loader callback, which will be called when</span></div><div class="line"><span class="comment">// trying to access a non-existing key. The key and 0...n additional arguments</span></div><div class="line"><span class="comment">// are passed to the callback function.</span></div><div class="line"><span class="comment">// SetDataLoader配置一个数据加载的回调，当尝试去请求一个不存在的key的时候调用</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="params">(table *CacheTable)</span> <span class="title">SetDataLoader</span><span class="params">(f <span class="keyword">func</span>(<span class="keyword">interface</span>&#123;&#125;, ...<span class="keyword">interface</span>&#123;&#125;)</span> *<span class="title">CacheItem</span>)</span> &#123;</div><div class="line">table.Lock()</div><div class="line"><span class="keyword">defer</span> table.Unlock()</div><div class="line">table.loadData = f</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// SetAddedItemCallback configures a callback, which will be called every time</span></div><div class="line"><span class="comment">// a new item is added to the cache.</span></div><div class="line"><span class="comment">//配置一个回调，当向缓存中添加项目时每次都会被调用。</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="params">(table *CacheTable)</span> <span class="title">SetAddedItemCallback</span><span class="params">(f <span class="keyword">func</span>(*CacheItem)</span>)</span> &#123;</div><div class="line">table.Lock()</div><div class="line"><span class="keyword">defer</span> table.Unlock()</div><div class="line">table.addedItem = f</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// SetAboutToDeleteItemCallback configures a callback, which will be called</span></div><div class="line"><span class="comment">// every time an item is about to be removed from the cache.</span></div><div class="line"><span class="comment">//配置一个回调，当一个项目从缓存中删除时每次都会被调用。</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="params">(table *CacheTable)</span> <span class="title">SetAboutToDeleteItemCallback</span><span class="params">(f <span class="keyword">func</span>(*CacheItem)</span>)</span> &#123;</div><div class="line">table.Lock()</div><div class="line"><span class="keyword">defer</span> table.Unlock()</div><div class="line">table.aboutToDeleteItem = f</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// SetLogger sets the logger to be used by this cache table.</span></div><div class="line"><span class="comment">//设置缓存表需要使用的log</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="params">(table *CacheTable)</span> <span class="title">SetLogger</span><span class="params">(logger *log.Logger)</span></span> &#123;</div><div class="line">table.Lock()</div><div class="line"><span class="keyword">defer</span> table.Unlock()</div><div class="line">table.logger = logger</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// Expiration check loop, triggered by a self-adjusting timer.</span></div><div class="line"><span class="comment">//缓存过期检查，通过一个定时器触发</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="params">(table *CacheTable)</span> <span class="title">expirationCheck</span><span class="params">()</span></span> &#123;</div><div class="line">table.Lock()</div><div class="line"><span class="keyword">if</span> table.cleanupTimer != <span class="literal">nil</span> &#123;</div><div class="line">table.cleanupTimer.Stop()</div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span> table.cleanupInterval &gt; <span class="number">0</span> &#123;</div><div class="line">table.log(<span class="string">"Expiration check triggered after"</span>, table.cleanupInterval, <span class="string">"for table"</span>, table.name)</div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">table.log(<span class="string">"Expiration check installed for table"</span>, table.name)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// To be more accurate with timers, we would need to update 'now' on every</span></div><div class="line"><span class="comment">// loop iteration. Not sure it's really efficient though.</span></div><div class="line"></div><div class="line"><span class="comment">// To be more accurate with timers, we would need to update 'now' on every</span></div><div class="line"><span class="comment">// loop iteration. Not sure it's really efficient though.</span></div><div class="line"><span class="comment">//为了定时器准确，我们需要在每一个循环中更新‘now’，不确定是否是有效的。</span></div><div class="line">now := time.Now()</div><div class="line">smallestDuration := <span class="number">0</span> * time.Second</div><div class="line"><span class="keyword">for</span> key, item := <span class="keyword">range</span> table.items &#123;</div><div class="line"><span class="comment">// Cache values so we don't keep blocking the mutex.</span></div><div class="line">item.RLock()</div><div class="line">lifeSpan := item.lifeSpan</div><div class="line">accessedOn := item.accessedOn</div><div class="line">item.RUnlock()</div><div class="line"></div><div class="line"><span class="keyword">if</span> lifeSpan == <span class="number">0</span> &#123;</div><div class="line"><span class="keyword">continue</span> <span class="comment">//等于0，永久有效</span></div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span> now.Sub(accessedOn) &gt;= lifeSpan &#123;</div><div class="line"><span class="comment">// Item has excessed its lifespan.项目已经超过了项目周期</span></div><div class="line">table.deleteInternal(key)</div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line"><span class="comment">// Find the item chronologically closest to its end-of-lifespan.</span></div><div class="line"><span class="comment">//查找最靠近结束生命周期的项目</span></div><div class="line"><span class="keyword">if</span> smallestDuration == <span class="number">0</span> || lifeSpan-now.Sub(accessedOn) &lt; smallestDuration &#123;</div><div class="line">smallestDuration = lifeSpan - now.Sub(accessedOn)</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// Setup the interval for the next cleanup run.</span></div><div class="line"><span class="comment">//为下次清理设置间隔</span></div><div class="line">table.cleanupInterval = smallestDuration</div><div class="line"><span class="keyword">if</span> smallestDuration &gt; <span class="number">0</span> &#123;</div><div class="line">table.cleanupTimer = time.AfterFunc(smallestDuration, <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</div><div class="line"><span class="keyword">go</span> table.expirationCheck()</div><div class="line">&#125;)</div><div class="line">&#125;</div><div class="line">table.Unlock()</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="params">(table *CacheTable)</span> <span class="title">addInternal</span><span class="params">(item *CacheItem)</span></span> &#123;</div><div class="line"><span class="comment">// Careful: do not run this method unless the table-mutex is locked!</span></div><div class="line"><span class="comment">// It will unlock it for the caller before running the callbacks and checks</span></div><div class="line">table.log(<span class="string">"Adding item with key"</span>, item.key, <span class="string">"and lifespan of"</span>, item.lifeSpan, <span class="string">"to table"</span>, table.name)</div><div class="line">table.items[item.key] = item</div><div class="line"></div><div class="line"><span class="comment">// Cache values so we don't keep blocking the mutex.</span></div><div class="line">expDur := table.cleanupInterval</div><div class="line">addedItem := table.addedItem</div><div class="line">table.Unlock()</div><div class="line"></div><div class="line"><span class="comment">// Trigger callback after adding an item to cache.</span></div><div class="line"><span class="keyword">if</span> addedItem != <span class="literal">nil</span> &#123;</div><div class="line">addedItem(item)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// If we haven't set up any expiration check timer or found a more imminent item.</span></div><div class="line"><span class="keyword">if</span> item.lifeSpan &gt; <span class="number">0</span> &amp;&amp; (expDur == <span class="number">0</span> || item.lifeSpan &lt; expDur) &#123;</div><div class="line">table.expirationCheck()</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// Add adds a key/value pair to the cache.</span></div><div class="line"><span class="comment">// Parameter key is the item's cache-key.</span></div><div class="line"><span class="comment">// Parameter lifeSpan determines after which time period without an access the item</span></div><div class="line"><span class="comment">// will get removed from the cache.</span></div><div class="line"><span class="comment">// Parameter data is the item's value.</span></div><div class="line"><span class="comment">//添加键值对到缓存中</span></div><div class="line"><span class="comment">//参数key是cache-key。</span></div><div class="line"><span class="comment">//参数lifeSpan（生命周期），确定在没有访问该项目的时间段后将从缓存中移除。</span></div><div class="line"><span class="comment">//参数data是项目中的值。</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="params">(table *CacheTable)</span> <span class="title">Add</span><span class="params">(key <span class="keyword">interface</span>&#123;&#125;, lifeSpan time.Duration, data <span class="keyword">interface</span>&#123;&#125;)</span> *<span class="title">CacheItem</span></span> &#123;</div><div class="line">item := NewCacheItem(key, lifeSpan, data) <span class="comment">//调用</span></div><div class="line"></div><div class="line"><span class="comment">// Add item to cache.</span></div><div class="line">table.Lock()</div><div class="line">table.addInternal(item)</div><div class="line"></div><div class="line"><span class="keyword">return</span> item</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="params">(table *CacheTable)</span> <span class="title">deleteInternal</span><span class="params">(key <span class="keyword">interface</span>&#123;&#125;)</span> <span class="params">(*CacheItem, error)</span></span> &#123;</div><div class="line">r, ok := table.items[key]</div><div class="line"><span class="keyword">if</span> !ok &#123;</div><div class="line"><span class="keyword">return</span> <span class="literal">nil</span>, ErrKeyNotFound</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// Cache value so we don't keep blocking the mutex.</span></div><div class="line">aboutToDeleteItem := table.aboutToDeleteItem</div><div class="line">table.Unlock()</div><div class="line"></div><div class="line"><span class="comment">// Trigger callbacks before deleting an item from cache.</span></div><div class="line"><span class="keyword">if</span> aboutToDeleteItem != <span class="literal">nil</span> &#123;</div><div class="line">aboutToDeleteItem(r)</div><div class="line">&#125;</div><div class="line"></div><div class="line">r.RLock()</div><div class="line"><span class="keyword">defer</span> r.RUnlock()</div><div class="line"><span class="keyword">if</span> r.aboutToExpire != <span class="literal">nil</span> &#123;</div><div class="line">r.aboutToExpire(key)</div><div class="line">&#125;</div><div class="line"></div><div class="line">table.Lock()</div><div class="line">table.log(<span class="string">"Deleting item with key"</span>, key, <span class="string">"created on"</span>, r.createdOn, <span class="string">"and hit"</span>, r.accessCount, <span class="string">"times from table"</span>, table.name)</div><div class="line"><span class="built_in">delete</span>(table.items, key)</div><div class="line"></div><div class="line"><span class="keyword">return</span> r, <span class="literal">nil</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// Delete an item from the cache.</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="params">(table *CacheTable)</span> <span class="title">Delete</span><span class="params">(key <span class="keyword">interface</span>&#123;&#125;)</span> <span class="params">(*CacheItem, error)</span></span> &#123;</div><div class="line">table.Lock()</div><div class="line"><span class="keyword">defer</span> table.Unlock()</div><div class="line"></div><div class="line"><span class="keyword">return</span> table.deleteInternal(key)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// Exists returns whether an item exists in the cache. Unlike the Value method</span></div><div class="line"><span class="comment">// Exists neither tries to fetch data via the loadData callback nor does it</span></div><div class="line"><span class="comment">// keep the item alive in the cache.</span></div><div class="line"><span class="comment">//返回项目是否在缓存中，不像这个数据方法，既不尝试渠道数据本地的回调也不保证</span></div><div class="line"><span class="comment">//项目在缓存中是否是存活的。</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="params">(table *CacheTable)</span> <span class="title">Exists</span><span class="params">(key <span class="keyword">interface</span>&#123;&#125;)</span> <span class="title">bool</span></span> &#123;</div><div class="line">table.RLock()</div><div class="line"><span class="keyword">defer</span> table.RUnlock()</div><div class="line">_, ok := table.items[key]</div><div class="line"></div><div class="line"><span class="keyword">return</span> ok</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// NotFoundAdd tests whether an item not found in the cache. Unlike the Exists</span></div><div class="line"><span class="comment">// method this also adds data if they key could not be found.</span></div><div class="line"><span class="comment">//测试是否一个项目不存在在缓存中，不像已经存在的方法，当key不存在时依旧添加。</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="params">(table *CacheTable)</span> <span class="title">NotFoundAdd</span><span class="params">(key <span class="keyword">interface</span>&#123;&#125;, lifeSpan time.Duration, data <span class="keyword">interface</span>&#123;&#125;)</span> <span class="title">bool</span></span> &#123;</div><div class="line">table.Lock()</div><div class="line"></div><div class="line"><span class="keyword">if</span> _, ok := table.items[key]; ok &#123;</div><div class="line">table.Unlock()</div><div class="line"><span class="keyword">return</span> <span class="literal">false</span></div><div class="line">&#125;</div><div class="line"></div><div class="line">item := NewCacheItem(key, lifeSpan, data)</div><div class="line">table.addInternal(item)</div><div class="line"></div><div class="line"><span class="keyword">return</span> <span class="literal">true</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// Value returns an item from the cache and marks it to be kept alive. You can</span></div><div class="line"><span class="comment">// pass additional arguments to your DataLoader callback function.</span></div><div class="line"><span class="comment">//从缓存中返回一个被标记的并保持活性的值，你可以传附件的参数到DATaLoader回调函数</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="params">(table *CacheTable)</span> <span class="title">Value</span><span class="params">(key <span class="keyword">interface</span>&#123;&#125;, args ...<span class="keyword">interface</span>&#123;&#125;)</span> <span class="params">(*CacheItem, error)</span></span> &#123;</div><div class="line">table.RLock()</div><div class="line">r, ok := table.items[key]</div><div class="line">loadData := table.loadData</div><div class="line">table.RUnlock()</div><div class="line"></div><div class="line"><span class="keyword">if</span> ok &#123;</div><div class="line"><span class="comment">// Update access counter and timestamp.</span></div><div class="line">r.KeepAlive()</div><div class="line"><span class="keyword">return</span> r, <span class="literal">nil</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// Item doesn't exist in cache. Try and fetch it with a data-loader.</span></div><div class="line"><span class="keyword">if</span> loadData != <span class="literal">nil</span> &#123;</div><div class="line">item := loadData(key, args...)</div><div class="line"><span class="keyword">if</span> item != <span class="literal">nil</span> &#123;</div><div class="line">table.Add(key, item.lifeSpan, item.data)</div><div class="line"><span class="keyword">return</span> item, <span class="literal">nil</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">return</span> <span class="literal">nil</span>, ErrKeyNotFoundOrLoadable</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">return</span> <span class="literal">nil</span>, ErrKeyNotFound</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// Flush deletes all items from this cache table.</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="params">(table *CacheTable)</span> <span class="title">Flush</span><span class="params">()</span></span> &#123;</div><div class="line">table.Lock()</div><div class="line"><span class="keyword">defer</span> table.Unlock()</div><div class="line"></div><div class="line">table.log(<span class="string">"Flushing table"</span>, table.name)</div><div class="line"></div><div class="line">table.items = <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">interface</span>&#123;&#125;]*CacheItem)</div><div class="line">table.cleanupInterval = <span class="number">0</span></div><div class="line"><span class="keyword">if</span> table.cleanupTimer != <span class="literal">nil</span> &#123;</div><div class="line">table.cleanupTimer.Stop()</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// CacheItemPair maps key to access counter</span></div><div class="line"><span class="keyword">type</span> CacheItemPair <span class="keyword">struct</span> &#123;</div><div class="line">Key         <span class="keyword">interface</span>&#123;&#125;</div><div class="line">AccessCount <span class="keyword">int64</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// CacheItemPairList is a slice of CacheIemPairs that implements sort.</span></div><div class="line"><span class="comment">// Interface to sort by AccessCount.</span></div><div class="line"><span class="comment">//CacheItemPairList时CacheItemPairs的一个排序后的切片，interface依据请求次数排序。</span></div><div class="line"><span class="keyword">type</span> CacheItemPairList []CacheItemPair</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p CacheItemPairList)</span> <span class="title">Swap</span><span class="params">(i, j <span class="keyword">int</span>)</span></span>      &#123; p[i], p[j] = p[j], p[i] &#125;</div><div class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p CacheItemPairList)</span> <span class="title">Len</span><span class="params">()</span> <span class="title">int</span></span>           &#123; <span class="keyword">return</span> <span class="built_in">len</span>(p) &#125;</div><div class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p CacheItemPairList)</span> <span class="title">Less</span><span class="params">(i, j <span class="keyword">int</span>)</span> <span class="title">bool</span></span> &#123; <span class="keyword">return</span> p[i].AccessCount &gt; p[j].AccessCount &#125;</div><div class="line"></div><div class="line"><span class="comment">// MostAccessed returns the most accessed items in this cache table</span></div><div class="line"><span class="comment">//返回缓存表中被访问最多的项目</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="params">(table *CacheTable)</span> <span class="title">MostAccessed</span><span class="params">(count <span class="keyword">int64</span>)</span> []*<span class="title">CacheItem</span></span> &#123;</div><div class="line">table.RLock()</div><div class="line"><span class="keyword">defer</span> table.RUnlock()</div><div class="line"></div><div class="line">p := <span class="built_in">make</span>(CacheItemPairList, <span class="built_in">len</span>(table.items))</div><div class="line">i := <span class="number">0</span></div><div class="line"><span class="keyword">for</span> k, v := <span class="keyword">range</span> table.items &#123;</div><div class="line">p[i] = CacheItemPair&#123;k, v.accessCount&#125;</div><div class="line">i++</div><div class="line">&#125;</div><div class="line">sort.Sort(p)</div><div class="line"></div><div class="line"><span class="keyword">var</span> r []*CacheItem</div><div class="line">c := <span class="keyword">int64</span>(<span class="number">0</span>)</div><div class="line"><span class="keyword">for</span> _, v := <span class="keyword">range</span> p &#123;</div><div class="line"><span class="keyword">if</span> c &gt;= count &#123;</div><div class="line"><span class="keyword">break</span></div><div class="line">&#125;</div><div class="line"></div><div class="line">item, ok := table.items[v.Key]</div><div class="line"><span class="keyword">if</span> ok &#123;</div><div class="line">r = <span class="built_in">append</span>(r, item)</div><div class="line">&#125;</div><div class="line">c++</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">return</span> r</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// Internal logging method for convenience.</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="params">(table *CacheTable)</span> <span class="title">log</span><span class="params">(v ...<span class="keyword">interface</span>&#123;&#125;)</span></span> &#123;</div><div class="line"><span class="keyword">if</span> table.logger == <span class="literal">nil</span> &#123;</div><div class="line"><span class="keyword">return</span></div><div class="line">&#125;</div><div class="line"></div><div class="line">table.logger.Println(v)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>该结构体中关于其中的锁和sync，当变量被一个线程改变时(临界区)，我们为它上锁，直到这个线程执行完成并解锁后，其他线程才能访问它。sync.Mutex 是一个互斥锁，它的作用是守护在临界区入口来确保同一时间只能有一个线程进入临界区。在sync包中还有一个 RWMutex 锁：它能通过 RLock()来允许同一时间多个线程对变量进行读操作，但是只能一个线程进行写操作。如果使用 Lock() 将和普通的 Mutex 作用相同。包中还有一个方便的 Once 类型变量的方法 once.Do(call)，这个方法确保被调用函数只能被调用一次。锁的目的就是几个线程访问同一个变量时，无法预知变量被不同线程修改的顺序，确保一次只有一个线程访问。<br>从结构体可以看出缓存表就是由一个值类型为缓存项的map以及一些附加属性组成：name用来唯一标识一个缓存表，在创建缓存表时指定。items是一个存储缓存项的map。cleanupTimer和cleanupInterval来控制多久更新一次缓存。相比于缓存项，缓存表多了一些回调函数。缓存表指定的回调函数作用于缓存表内的所有缓存项，而缓存项指定的回调函数仅对单条缓存有效。缓存表提供了缓存常见的操作方法：<br><br>增：Add，NotFoundAdd<br><br>删：Delete<br><br>查：Value<br><br>是否存在：Exists<br><br>缓存总数：Count<br><br>缓存刷新：Flush<br><br>缓存遍历：Foreach<br><br>回调函数设置：SetAboutToDeleteItemCallba，SetAddedItemCallback，SetDataLoader访问最多的前几个缓存项：MostAccessed为了提供访问最多的前几个缓存项，cache2go又定义了CacheItemPair和CacheItemPairList。CacheItemPair有缓存的key和AccessCount组成，而CacheItemPairList则是CacheItemPair组成的Slice，且实现了Sort接口。</p><h1 id="4-缓存"><a href="#4-缓存" class="headerlink" title="4.缓存"></a>4.缓存</h1><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> cache2go</div><div class="line"></div><div class="line"><span class="keyword">import</span> <span class="string">"sync"</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> (</div><div class="line">cache = <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>]*CacheTable)</div><div class="line">mutex sync.RWMutex</div><div class="line">)</div><div class="line"></div><div class="line"><span class="comment">//Cache returns the exiting cache table with given name or creates a new one</span></div><div class="line"><span class="comment">//if the table does not exist yet.</span></div><div class="line"><span class="comment">//返回现有的缓存表与给定的名称，如果表不存在创基一个新的</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">Cache</span><span class="params">(table <span class="keyword">string</span>)</span> *<span class="title">CacheTable</span></span> &#123;</div><div class="line"><span class="comment">//读取时加了一个读锁Rlock，读完之后解锁Runlock</span></div><div class="line">mutex.RLock()</div><div class="line">t, ok := cache[table]</div><div class="line">mutex.RUnlock()</div><div class="line"></div><div class="line"><span class="comment">//ok，用来判断cache的map是否存在，不存在就创建，存在就返回，返回的是CacheTable的地址</span></div><div class="line"><span class="keyword">if</span> !ok &#123;</div><div class="line">mutex.Lock()</div><div class="line">t, ok = cache[table]</div><div class="line"><span class="comment">//Double check wether the table exists or not</span></div><div class="line"><span class="keyword">if</span> !ok &#123;</div><div class="line">t = &amp;CacheTable&#123;</div><div class="line">name:  table,</div><div class="line">items: <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">interface</span>&#123;&#125;]*CacheItem),</div><div class="line">&#125;</div><div class="line">cache[table] = t</div><div class="line">&#125;</div><div class="line">mutex.Unlock()</div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> t</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>使用cache2go时，我们第一步一般都是调用上面的Cache函数创建缓存，该函数会检查一个全局变量cache（该变量是一个map，其值类型为<em>CacheTable，key是缓存表的名字），如果该map中已经有名字为table的缓存表，就返回该缓存表；否则就创建。该函数返回缓存表的指针，即</em>CacheTable。也就是说在cache2go中，缓存表就代表一个缓存，而我们可以创建多个不同名字的缓存，存储在全局变量cache中。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;excerpt in=&quot;&quot; index=&quot;&quot; |=&quot;&quot; 首页摘要=&quot;&quot;&gt;&lt;br&gt;+
    
    </summary>
    
      <category term="Program" scheme="http://yoursite.com/categories/Program/"/>
    
    
      <category term="GO" scheme="http://yoursite.com/tags/GO/"/>
    
      <category term="程序设计" scheme="http://yoursite.com/tags/%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title>Golang中的错误处理</title>
    <link href="http://yoursite.com/2017/11/05/error/"/>
    <id>http://yoursite.com/2017/11/05/error/</id>
    <published>2017-11-05T13:19:58.000Z</published>
    <updated>2017-11-05T13:38:05.269Z</updated>
    
    <content type="html"><![CDATA[<p><excerpt in="" index="" |="" 首页摘要=""><br>+<a id="more"></a></excerpt></p><h2 id=""><a href="#" class="headerlink" title="  "></a><the rest="" of="" contents="" |="" 余下全文="">  </the></h2><h1 id="1-错误处理"><a href="#1-错误处理" class="headerlink" title="1.错误处理"></a>1.错误处理</h1><p>Go 有一个预先定义的 error 接口类型<br><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">type</span> error <span class="keyword">interface</span> &#123;</div><div class="line">Error() <span class="keyword">string</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>任何时你需要一个新的错误类型时，都可以用 error包的 errors.New 函数接收合适的错误信息来创建<br><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">err := errors.New(“math - square root of negative number”)</div></pre></td></tr></table></figure></p><p>用fmt创建错误对象<br><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> f &lt; <span class="number">0</span> &#123;</div><div class="line"><span class="keyword">return</span> <span class="number">0</span>, fmt.Errorf(<span class="string">"math: square root of negative number %g"</span>, f)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>通常想要返回包含错误参数的更有信息量的字符串，例如：可以用 fmt.Errorf() 来实现：它和 fmt.Printf() 完全一样，接收有一个或多个格式占位符的格式化字符串和相应数量的占位变量。<br>和打印信息不同的是它用信息生成错误对象。</p><h1 id="2-运行时异常和-panic"><a href="#2-运行时异常和-panic" class="headerlink" title="2.运行时异常和 panic"></a>2.运行时异常和 panic</h1><p>当发生像数组下标越界或类型断言失败这样的运行错误时，Go 运行时会触发运行时panic<br>panic 接收一个做任意类型的参数，通常是字符串，在程序死亡时被打印出来。<br><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">fmt.Println(<span class="string">"Starting the program"</span>)</div><div class="line"><span class="built_in">panic</span>(<span class="string">"A severe error occurred: stopping the program!"</span>)</div><div class="line">fmt.Println(<span class="string">"Ending the program"</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>当发生错误必须中止程序时，panic可以用于错误处理模式：<br><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line"><span class="built_in">panic</span>(<span class="string">"ERROR occurred:"</span> + err.Error())</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>在多层嵌套的函数调用中调用panic可以马上中止当前函数的执行,所有的defer语句都会保证执行并把控制权交还给接收到panic的函数调用者。</p><h1 id="3-从-panic-中恢复（Recover）"><a href="#3-从-panic-中恢复（Recover）" class="headerlink" title="3.从 panic 中恢复（Recover）"></a>3.从 panic 中恢复（Recover）</h1><p>这个（recover）内建函数被用于从panic或错误场景中恢复：让程序可以从 panicking 重新获得控制权，停止终止过程进而恢复正常执行。</p><p>recover只能在defer修饰的函数中使用：用于取得 panic 调用中传递过来的错误值，如果是正常执行，调用recover会返回nil，且没有其它效果。</p><p>下面例子中的 protect 函数调用函数参数 g 来保护调用者防止从 g 中抛出的运行时 panic，并展示 panic 中的信息：<br><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">protect</span><span class="params">(g <span class="keyword">func</span>()</span>)</span> &#123;</div><div class="line"><span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</div><div class="line">log.Println(<span class="string">"done"</span>)</div><div class="line"><span class="comment">// Println executes normally even if there is a panic</span></div><div class="line"><span class="keyword">if</span> err := <span class="built_in">recover</span>(); err != <span class="literal">nil</span> &#123;</div><div class="line">log.Printf(<span class="string">"run time panic: %v"</span>, err)</div><div class="line">&#125;</div><div class="line">&#125;()</div><div class="line">log.Println(<span class="string">"start"</span>)</div><div class="line">g() <span class="comment">//   possible runtime-error</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>完整示例：<br><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> (</div><div class="line"><span class="string">"fmt"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">badCall</span><span class="params">()</span></span> &#123;</div><div class="line"><span class="built_in">panic</span>(<span class="string">"bad end"</span>)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">test</span><span class="params">()</span></span> &#123;</div><div class="line"><span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</div><div class="line"><span class="keyword">if</span> e := <span class="built_in">recover</span>(); e != <span class="literal">nil</span> &#123;</div><div class="line">fmt.Printf(<span class="string">"Panicing %s\r\n"</span>, e)</div><div class="line">&#125;</div><div class="line">&#125;()</div><div class="line">badCall()</div><div class="line">fmt.Printf(<span class="string">"After bad call\r\n"</span>) <span class="comment">// &lt;-- wordt niet bereikt</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">fmt.Printf(<span class="string">"Calling test\r\n"</span>)</div><div class="line">test()</div><div class="line">fmt.Printf(<span class="string">"Test completed\r\n"</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p> 首先，执行main函数，先输出Calling test,然后调用test函数，首先程序进入panic，然后执行defer语句，调用recover，恢复程序执行，输出程序panic的原因，最后执行Testcompleted.</p><h1 id="4-自定义包中的错误处理和-panicking"><a href="#4-自定义包中的错误处理和-panicking" class="headerlink" title="4.自定义包中的错误处理和 panicking"></a>4.自定义包中的错误处理和 panicking</h1><p>1）在包内部，总是应该从 panic 中 recover：不允许显式的超出包范围的 panic()<br><br>2）向包的调用者返回错误值（而不是 panic）。<br>在包内部，特别是在非导出函数中有很深层次的嵌套调用时，对主调函数来说用 panic 来表示应该被翻译成错误的错误场景是很有用的（并且提高了代码可读性）。</p><h1 id="5-一种用闭包处理错误的模式"><a href="#5-一种用闭包处理错误的模式" class="headerlink" title="5.一种用闭包处理错误的模式"></a>5.一种用闭包处理错误的模式</h1><p>每当函数返回时，我们应该检查是否有错误发生：但是这会导致重复的代码。<br><br>假设所有的函数都有这样的签名：<br><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">f</span><span class="params">(a type1, b type2)</span></span></div></pre></td></tr></table></figure></p><p>给这个类型定义一个名字：<br><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">fType1 = <span class="function"><span class="keyword">func</span> <span class="title">f</span><span class="params">(a type1, b type2)</span></span></div></pre></td></tr></table></figure></p><p>使用两个辅助函数：<br><br>1)check：这是用来检查是否有错误和 panic 发生的函数：<br><br><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">check</span><span class="params">(err error)</span></span> &#123; <span class="keyword">if</span> err != <span class="literal">nil</span> &#123; <span class="built_in">panic</span>(err) &#125; &#125;</div></pre></td></tr></table></figure></p><p>2)errorhandler：这是一个包装函数。接收一个fType1类型的函数fn并返回一个调用fn的函数。里面就包含有defer/recover机制。<br><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">errorHandler</span><span class="params">(fn fType1)</span> <span class="title">fType1</span></span> &#123;</div><div class="line"><span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">(a type1, b type2)</span></span> &#123;</div><div class="line"><span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</div><div class="line"><span class="keyword">if</span> err, ok := <span class="built_in">recover</span>().(error); ok &#123;</div><div class="line">log.Printf(“run time <span class="built_in">panic</span>: %v”, err)</div><div class="line">&#125;</div><div class="line">&#125;()</div><div class="line">fn(a, b)</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;excerpt in=&quot;&quot; index=&quot;&quot; |=&quot;&quot; 首页摘要=&quot;&quot;&gt;&lt;br&gt;+
    
    </summary>
    
      <category term="Program" scheme="http://yoursite.com/categories/Program/"/>
    
    
      <category term="GO" scheme="http://yoursite.com/tags/GO/"/>
    
      <category term="程序设计" scheme="http://yoursite.com/tags/%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title>013 努力把生活过成自己喜欢的模样</title>
    <link href="http://yoursite.com/2017/11/05/13/"/>
    <id>http://yoursite.com/2017/11/05/13/</id>
    <published>2017-11-05T11:03:14.000Z</published>
    <updated>2017-11-06T12:35:36.447Z</updated>
    
    <content type="html"><![CDATA[<p><excerpt in="" index="" |="" 首页摘要=""><br>+<a id="more"></a></excerpt></p><the rest="" of="" contents="" |="" 余下全文=""><p>我们总会羡慕别人的生活，总觉得别人把生活是自己想要的那种生活方式，看到别人朋友圈晒出去哪玩，最近又做了什么，自己心里也会想这个我也会啊，我也可以的，可是，最终，我们都没有完成，还是一边在拖延中度过，一边在后悔自己不该拖延中度过。我们都可以改变自己适应身边的环境，也可以改变自己适应成功，那么我想我们应该也可以改掉自己拖延的毛病。</p><p><img src="http://owxsbpjrr.bkt.clouddn.com/18b85601e7c67c86a0b5e080a3d67382.png" alt="11"></p><p>今天出去爬山了，去了半山，感觉还是挺有意思的，虽然这边的山普遍都不高，虽然不能说今天收获到了什么，总之，可以散散心，将自己的状态调整到最佳看，面对周一和新的挑战。</p><p><img src="http://owxsbpjrr.bkt.clouddn.com/11e8cc3345015836256bb3fb779b596d.png" alt="22"></p><p><img src="http://owxsbpjrr.bkt.clouddn.com/f8ab017bfc3725437289b7e65c8c506d.png" alt="33"></p><p>慢慢地成长，把生活过程自己想要的模样。我觉得，人生活就是为了让自己有愉悦感，幸福感，成就感。这些东西说难也难，说简单也很简单。每个人理解的方式可能会有所不同，但重要的是一定要有希望，要热爱，和不放弃。</p></the>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;excerpt in=&quot;&quot; index=&quot;&quot; |=&quot;&quot; 首页摘要=&quot;&quot;&gt;&lt;br&gt;+
    
    </summary>
    
      <category term="异度空间" scheme="http://yoursite.com/categories/%E5%BC%82%E5%BA%A6%E7%A9%BA%E9%97%B4/"/>
    
    
      <category term="Encounters" scheme="http://yoursite.com/tags/Encounters/"/>
    
  </entry>
  
  <entry>
    <title>Golang中的控制流程</title>
    <link href="http://yoursite.com/2017/11/02/else/"/>
    <id>http://yoursite.com/2017/11/02/else/</id>
    <published>2017-11-02T13:49:55.000Z</published>
    <updated>2017-11-02T13:58:46.826Z</updated>
    
    <content type="html"><![CDATA[<p><excerpt in="" index="" |="" 首页摘要=""><br>+<a id="more"></a></excerpt></p><the rest="" of="" contents="" |="" 余下全文="">  <h1 id="1-条件语句"><a href="#1-条件语句" class="headerlink" title="1.条件语句"></a>1.条件语句</h1><p>if是用于测试某个条件（布尔型或逻辑型）的语句，如果该条件成立，则会执行if后由大括号括起来的代码块，否则就忽略该代码块继续执行后续的代码。<br><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> condition &#123;</div><div class="line"><span class="comment">// do something</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p> 两个分支：<br><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"> <span class="keyword">if</span> condition &#123;</div><div class="line"><span class="comment">// do something</span></div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line"><span class="comment">// do something</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>多个分支：<br><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> condition1 &#123;</div><div class="line"><span class="comment">// do something</span></div><div class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> condition2 &#123;</div><div class="line"><span class="comment">// do something else</span></div><div class="line">&#125;<span class="keyword">else</span> &#123;</div><div class="line"><span class="comment">// catch-all or default</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>简单示例：<br><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">bool1 := <span class="literal">true</span></div><div class="line"><span class="keyword">if</span> bool1 &#123;</div><div class="line">fmt.Printf(<span class="string">"The value is true\n"</span>)</div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">fmt.Printf(<span class="string">"The value is false\n"</span>)</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>关于条件语句，需要注意以下几点： <br><br> 条件语句不需要使用括号将条件包含起来()；<br><br> 无论语句体内有几条语句，花括号{}都是必须存在的；<br><br> 左花括号{必须与if或者else处于同一行； <br><br> 在if之后，条件语句之前，可以添加变量初始化语句，使用;间隔； <br><br> 在有返回值的函数中，不允许将“终的”return语句包含在if…else…结构中,否则会编译失败： function ends without a return statement。 <br><br>失败的原因在于，Go编译器无法找到终止该函数的return语句。</p><h2 id="1-1测试多返回值函数的错误"><a href="#1-1测试多返回值函数的错误" class="headerlink" title="1.1测试多返回值函数的错误"></a>1.1测试多返回值函数的错误</h2><p>习惯用法<br><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">value, err := pack1.Function1(param1)</div><div class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line">fmt.Printf(<span class="string">"An error occured in pack1.Function1 with parameter %v"</span>, param1)</div><div class="line"><span class="keyword">return</span> err</div><div class="line">&#125;</div><div class="line"><span class="comment">// 未发生错误，继续执行：</span></div></pre></td></tr></table></figure></p><p>如果在main函数中执行这段代码，程序会直接停止运行。<br><br>如果我们想要在错误发生的同时终止程序的运行，我们可以使用 os 包的 Exit 函数：<br><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line">fmt.Printf(<span class="string">"Program stopping with error %v"</span>, err)</div><div class="line">os.Exit(<span class="number">1</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h1 id="2-switch结构"><a href="#2-switch结构" class="headerlink" title="2.switch结构"></a>2.switch结构</h1><p>用法：<br><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">switch</span> var1 &#123;</div><div class="line"><span class="keyword">case</span> val1:</div><div class="line">...</div><div class="line"><span class="keyword">case</span> val2:</div><div class="line">...</div><div class="line"><span class="keyword">default</span>:</div><div class="line">...</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>变量 var1 可以是任何类型，而 val1 和 val2 则可以是同类型的任意值。类型不被局限于常量或整数，但必须是相同的类型；或者最终结果为相同类型的表达式。前花括号 { 必须和 switch 关键字在同一行。<br><br>简单示例：<br><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line"><span class="keyword">var</span> num1 <span class="keyword">int</span> = <span class="number">100</span></div><div class="line"></div><div class="line"><span class="keyword">switch</span> num1 &#123;</div><div class="line"><span class="keyword">case</span> <span class="number">98</span>, <span class="number">99</span>:</div><div class="line">fmt.Println(<span class="string">"It's equal to 98"</span>)</div><div class="line"><span class="keyword">case</span> <span class="number">100</span>:</div><div class="line">fmt.Println(<span class="string">"It's equal to 100"</span>)</div><div class="line"><span class="keyword">default</span>:</div><div class="line">fmt.Println(<span class="string">"It's not equal to 98 or 100"</span>)</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h1 id="3-for语句"><a href="#3-for语句" class="headerlink" title="3.for语句"></a>3.for语句</h1><p>基本形式：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> 初始化语句; 条件语句; 修饰语句 &#123;&#125;</div></pre></td></tr></table></figure><p> for 循环嵌套起来：<br><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> i:=<span class="number">0</span>; i&lt;<span class="number">5</span>; i++ &#123;</div><div class="line"><span class="keyword">for</span> j:=<span class="number">0</span>; j&lt;<span class="number">10</span>; j++ &#123;</div><div class="line"><span class="built_in">println</span>(j)</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h2 id="3-1基于条件判断的迭代"><a href="#3-1基于条件判断的迭代" class="headerlink" title="3.1基于条件判断的迭代"></a>3.1基于条件判断的迭代</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line"><span class="keyword">var</span> i <span class="keyword">int</span> = <span class="number">5</span></div><div class="line"></div><div class="line"><span class="keyword">for</span> i &gt;= <span class="number">0</span> &#123;</div><div class="line">i = i - <span class="number">1</span></div><div class="line">fmt.Printf(<span class="string">"The variable i is now: %d\n"</span>, i)</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="3-2-for-range-结构"><a href="#3-2-for-range-结构" class="headerlink" title="3.2 for-range 结构"></a>3.2 for-range 结构</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">str := <span class="string">"Go is a beautiful language!"</span></div><div class="line">fmt.Printf(<span class="string">"The length of str is: %d\n"</span>, <span class="built_in">len</span>(str))</div><div class="line"><span class="keyword">for</span> pos, char := <span class="keyword">range</span> str &#123;</div><div class="line">fmt.Printf(<span class="string">"Character on position %d is: %c \n"</span>, pos, char)</div><div class="line">&#125;</div><div class="line">fmt.Println()</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>首先输出字符串的长度，然后通过for-range，遍历每个字符，然后分别输出每个字符。（通过键值对的组合）</p><h1 id="4-Break和continue"><a href="#4-Break和continue" class="headerlink" title="4.Break和continue"></a>4.Break和continue</h1><p>break会跳出当前的循环：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> &#123;</div><div class="line">i = i - <span class="number">1</span></div><div class="line">fmt.Printf(<span class="string">"The variable i is now: %d\n"</span>, i)</div><div class="line"><span class="keyword">if</span> i &lt; <span class="number">0</span> &#123;</div><div class="line"><span class="keyword">break</span></div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><blockquote><p>每次迭代都会对条件进行检查（i &lt; 0），以此判断是否需要停止循环。如果退出条件满足，则使用 break 语句退出循环。break  的作用范围是该循环的最内部循环体。<br></p></blockquote><p>关键字continue忽略剩余的循环体而直接进入下一次循环的过程，但不是无条件执行下一次循环，执行之前依旧需要满足循环的判断条件。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</div><div class="line"><span class="keyword">if</span> i == <span class="number">5</span> &#123;</div><div class="line"><span class="keyword">continue</span></div><div class="line">&#125;</div><div class="line"><span class="built_in">print</span>(i)</div><div class="line"><span class="built_in">print</span>(<span class="string">" "</span>)</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="5-标签与goto"><a href="#5-标签与goto" class="headerlink" title="5.标签与goto"></a>5.标签与goto</h1><p>for、switch 或 select 语句都可以配合标签（label）形式的标识符使用，即某一行第一个以冒号（:）结尾的单词（gofmt 会将后续代码自动移至下一行）。<br><br><strong>标签的名称是大小写敏感的，为了提升可读性，一般建议使用全部大写字母</strong><br><br><strong>continue:</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line"></div><div class="line">LABEL1:</div><div class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt;= <span class="number">5</span>; i++ &#123;</div><div class="line"><span class="keyword">for</span> j := <span class="number">0</span>; j &lt;= <span class="number">5</span>; j++ &#123;</div><div class="line"><span class="keyword">if</span> j == <span class="number">4</span> &#123;</div><div class="line"><span class="keyword">continue</span> LABEL1</div><div class="line">&#125;</div><div class="line">fmt.Printf(<span class="string">"i is: %d, and j is: %d\n"</span>, i, j)</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>continue语句指向LABEL1，当执行到该语句的时候，就会跳转到LABEL1标签的位置。当 j==4和j==5的时候，没有任何输出：标签的作用对象为外部循环。<br><br><strong>goto:</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">i:=<span class="number">0</span></div><div class="line">HERE:</div><div class="line"><span class="built_in">print</span>(i)</div><div class="line">i++</div><div class="line"><span class="keyword">if</span> i==<span class="number">5</span> &#123;</div><div class="line"><span class="keyword">return</span></div><div class="line">&#125;</div><div class="line"><span class="keyword">goto</span> HERE</div><div class="line">&#125;</div></pre></td></tr></table></figure></the>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;excerpt in=&quot;&quot; index=&quot;&quot; |=&quot;&quot; 首页摘要=&quot;&quot;&gt;&lt;br&gt;+
    
    </summary>
    
      <category term="Program" scheme="http://yoursite.com/categories/Program/"/>
    
    
      <category term="GO" scheme="http://yoursite.com/tags/GO/"/>
    
      <category term="程序设计" scheme="http://yoursite.com/tags/%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title>012 一个人也要生活的很精致</title>
    <link href="http://yoursite.com/2017/11/02/012/"/>
    <id>http://yoursite.com/2017/11/02/012/</id>
    <published>2017-11-02T12:19:34.000Z</published>
    <updated>2017-11-06T12:35:33.008Z</updated>
    
    <content type="html"><![CDATA[<p><excerpt in="" index="" |="" 首页摘要=""><br>+<a id="more"></a></excerpt></p><the rest="" of="" contents="" |="" 余下全文=""><p>在我们的生命里，会遇到许多人，也会很成功的错过很多人，成为彼此生命中的过客，直到最后那个不离开的人，才会是我们生命中最重要的人。我想，总有一天，我们都会遇到那个对的人，在此之前，我们都应该让自己更加完美，以最美的姿态迎接那个对的人。</p><p><img src="http://owxsbpjrr.bkt.clouddn.com/592a6d32d4d89e869efa2bd02d68ad6e.png" alt="11"></p><blockquote><p>随手拍——图文无关</p></blockquote><p>荷西问三毛：你想嫁个什么样的人？三毛说：看的顺眼的，千万富翁也嫁；看不顺眼的，亿万富翁也嫁。荷西：说来说去还是想嫁个有钱的。三毛看了荷西一眼：也有例外。那你要是嫁给我呢？荷西问道。三毛叹了口气：要是你的话，只要够吃饭的钱就够了。那你吃得多吗？荷西问。不多不多，以后还可以少吃点。我们都会遇到那么一个人，遇到之后，原来那些条条框框的标准，都会一条不剩，爱的仅仅是那个人，我们都会渴望柯西和三毛爱情，简简单单，一个眼神就足以读懂对方，希望我们都会尽早遇到那个人吧。</p><p><img src="http://owxsbpjrr.bkt.clouddn.com/9cfe9453f90f945597f3f83dfa97cea2.png" alt="22"></p><blockquote><p>随手拍——图文无关</p></blockquote><p>在这个陌生的城市中，希望我们不要迷失自己，一个人也要生活的很精致，没有遇到那个对的人之前，努力让自己更加完美一点。喜欢阅读，虽然不会立刻感觉都有多大用处，但是我相信，量变会引起质变的，这些都将是我的财富。偶尔周末出去走走，虽然说也没有什么收获，但也可以让自己散散心，以最好的状态面对新的一周，面对工作和学习。不要老是羡慕别人的生活，只要我们愿意付出，我们自己的生活也会充满诗情画意。<br><br>无论你在哪，你在干什么，请务必记得，一个人也要生活的很精致！</p></the>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;excerpt in=&quot;&quot; index=&quot;&quot; |=&quot;&quot; 首页摘要=&quot;&quot;&gt;&lt;br&gt;+
    
    </summary>
    
      <category term="异度空间" scheme="http://yoursite.com/categories/%E5%BC%82%E5%BA%A6%E7%A9%BA%E9%97%B4/"/>
    
    
      <category term="Encounter" scheme="http://yoursite.com/tags/Encounter/"/>
    
  </entry>
  
  <entry>
    <title>Golang实现简单的聊天室</title>
    <link href="http://yoursite.com/2017/10/31/chat/"/>
    <id>http://yoursite.com/2017/10/31/chat/</id>
    <published>2017-10-31T14:06:19.000Z</published>
    <updated>2017-11-02T13:48:33.562Z</updated>
    
    <content type="html"><![CDATA[<p><excerpt in="" index="" |="" 首页摘要=""><br>+<a id="more"></a></excerpt></p><the rest="" of="" contents="" |="" 余下全文="">   <p>首先，要实现聊天，就要有一个服务器接收发送到的信息，还有一个客户端向服务器发送信息，所以有两部分代码，一部分是客户端，另一部分是服务端。</p><p><strong>服务端代码</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div></pre></td><td class="code"><pre><div class="line">package main</div><div class="line">import (</div><div class="line"><span class="string">"fmt"</span></div><div class="line"><span class="string">"net"</span></div><div class="line"><span class="string">"os"</span></div><div class="line">)</div><div class="line">//通道</div><div class="line">var clients []net.Conn</div><div class="line"></div><div class="line">func <span class="function"><span class="title">main</span></span>() &#123;</div><div class="line">var (</div><div class="line">host   = <span class="string">"localhost"</span></div><div class="line">port   = <span class="string">"8000"</span></div><div class="line">remote = host + <span class="string">":"</span> + port</div><div class="line">data   = make([]byte, 1024)</div><div class="line">)</div><div class="line">fmt.Println(<span class="string">"Initiating server..."</span>)</div><div class="line"></div><div class="line">lis, err := net.Listen(<span class="string">"tcp"</span>, remote)</div><div class="line">defer lis.Close()</div><div class="line"></div><div class="line"><span class="keyword">if</span> err != nil &#123;</div><div class="line">fmt.Printf(<span class="string">"Error when listen: %s, Err: %s\n"</span>, remote, err)</div><div class="line">os.Exit(-1)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">for</span> &#123;</div><div class="line">var res string</div><div class="line">conn, err := lis.Accept()</div><div class="line"><span class="keyword">if</span> err != nil &#123;</div><div class="line">fmt.Println(<span class="string">"Error accepting client: "</span>, err.Error())</div><div class="line">os.Exit(0)</div><div class="line">&#125;</div><div class="line">clients = append(clients, conn)</div><div class="line"></div><div class="line">go func(con net.Conn) &#123;</div><div class="line">fmt.Println(<span class="string">"New connection: "</span>, con.RemoteAddr())</div><div class="line"></div><div class="line">// Get client<span class="string">'s name</span></div><div class="line"><span class="string">length, err := con.Read(data)</span></div><div class="line"><span class="string">if err != nil &#123;</span></div><div class="line"><span class="string">fmt.Printf("Client %v quit.\n", con.RemoteAddr())</span></div><div class="line"><span class="string">con.Close()</span></div><div class="line"><span class="string">disconnect(con, con.RemoteAddr().String())</span></div><div class="line"><span class="string">return</span></div><div class="line"><span class="string">&#125;</span></div><div class="line"><span class="string">name := string(data[:length])</span></div><div class="line"><span class="string">comeStr := name + " entered the room."</span></div><div class="line"><span class="string">notify(con, comeStr)</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">// Begin recieve message from client</span></div><div class="line"><span class="string">for &#123;</span></div><div class="line"><span class="string">length, err := con.Read(data)</span></div><div class="line"><span class="string">if err != nil &#123;</span></div><div class="line"><span class="string">fmt.Printf("Client %s quit.\n", name)</span></div><div class="line"><span class="string">con.Close()</span></div><div class="line"><span class="string">disconnect(con, name)</span></div><div class="line"><span class="string">return</span></div><div class="line"><span class="string">&#125;</span></div><div class="line"><span class="string">res = string(data[:length])</span></div><div class="line"><span class="string">sprdMsg := name + " said: " + res</span></div><div class="line"><span class="string">fmt.Println(sprdMsg)</span></div><div class="line"><span class="string">res = "You said:" + res</span></div><div class="line"><span class="string">con.Write([]byte(res))</span></div><div class="line"><span class="string">notify(con, sprdMsg)</span></div><div class="line"><span class="string">&#125;</span></div><div class="line"><span class="string">&#125;(conn)</span></div><div class="line"><span class="string">&#125;</span></div><div class="line"><span class="string">&#125;</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">//服务端收到消息后需要通知各个客户端</span></div><div class="line"><span class="string">func notify(conn net.Conn, msg string) &#123;</span></div><div class="line"><span class="string">for _, con := range clients &#123;</span></div><div class="line"><span class="string">if con.RemoteAddr() != conn.RemoteAddr() &#123;</span></div><div class="line"><span class="string">con.Write([]byte(msg))</span></div><div class="line"><span class="string">&#125;</span></div><div class="line"><span class="string">&#125;</span></div><div class="line"><span class="string">&#125;</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">//当有人离开聊天室时，通知所有的用户。</span></div><div class="line"><span class="string">func disconnect(conn net.Conn, name string) &#123;</span></div><div class="line"><span class="string">for index, con := range clients &#123;</span></div><div class="line"><span class="string">if con.RemoteAddr() == conn.RemoteAddr() &#123;</span></div><div class="line"><span class="string">disMsg := name + " has left the room."</span></div><div class="line"><span class="string">fmt.Println(disMsg)</span></div><div class="line"><span class="string">clients = append(clients[:index], clients[index+1:]...)</span></div><div class="line"><span class="string">notify(conn, disMsg)</span></div><div class="line"><span class="string">&#125;</span></div><div class="line"><span class="string">&#125;</span></div><div class="line"><span class="string">&#125;</span></div></pre></td></tr></table></figure></p><p><strong>客户端代码</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div></pre></td><td class="code"><pre><div class="line">package main</div><div class="line"></div><div class="line">import (</div><div class="line"><span class="string">"bufio"</span></div><div class="line"><span class="string">"fmt"</span></div><div class="line"><span class="string">"net"</span></div><div class="line"><span class="string">"os"</span></div><div class="line">)</div><div class="line"></div><div class="line">var writeStr, readStr = make([]byte, 1024), make([]byte, 1024)</div><div class="line"></div><div class="line">func <span class="function"><span class="title">main</span></span>() &#123;</div><div class="line">var (</div><div class="line">host   = <span class="string">"localhost"</span></div><div class="line">port   = <span class="string">"8000"</span></div><div class="line">remote = host + <span class="string">":"</span> + port</div><div class="line">reader = bufio.NewReader(os.Stdin)</div><div class="line">)</div><div class="line"></div><div class="line">con, err := net.Dial(<span class="string">"tcp"</span>, remote)</div><div class="line">defer con.Close()</div><div class="line"></div><div class="line"><span class="keyword">if</span> err != nil &#123;</div><div class="line">fmt.Println(<span class="string">"Server not found."</span>)</div><div class="line">os.Exit(-1)</div><div class="line">&#125;</div><div class="line">fmt.Println(<span class="string">"Connection OK."</span>)</div><div class="line">fmt.Printf(<span class="string">"Enter your name: "</span>)</div><div class="line">fmt.Scanf(<span class="string">"%s"</span>, &amp;writeStr)</div><div class="line"><span class="keyword">in</span>, err := con.Write([]byte(writeStr))</div><div class="line"><span class="keyword">if</span> err != nil &#123;</div><div class="line">fmt.Printf(<span class="string">"Error when send to server: %d\n"</span>, <span class="keyword">in</span>)</div><div class="line">os.Exit(0)</div><div class="line">&#125;</div><div class="line">fmt.Println(<span class="string">"Now begin to talk!"</span>)</div><div class="line">go <span class="built_in">read</span>(con)</div><div class="line"></div><div class="line"><span class="keyword">for</span> &#123;</div><div class="line">writeStr, _, _ = reader.ReadLine()</div><div class="line"><span class="keyword">if</span> string(writeStr) == <span class="string">"quit"</span> &#123;</div><div class="line">fmt.Println(<span class="string">"Communication terminated."</span>)</div><div class="line">os.Exit(1)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">in</span>, err := con.Write([]byte(writeStr))</div><div class="line"><span class="keyword">if</span> err != nil &#123;</div><div class="line">fmt.Printf(<span class="string">"Error when send to server: %d\n"</span>, <span class="keyword">in</span>)</div><div class="line">os.Exit(0)</div><div class="line">&#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">func <span class="built_in">read</span>(conn net.Conn) &#123;</div><div class="line"><span class="keyword">for</span> &#123;</div><div class="line">length, err := conn.Read(readStr)</div><div class="line"><span class="keyword">if</span> err != nil &#123;</div><div class="line">fmt.Printf(<span class="string">"Error when read from server. Error:%s\n"</span>, err)</div><div class="line">os.Exit(0)</div><div class="line">&#125;</div><div class="line">fmt.Println(string(readStr[:length]))</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p><strong>结果见下图</strong><br>先开启服务端<br><img src="http://owxsbpjrr.bkt.clouddn.com/d317b6946309cb11619f661581ba436f.png" alt="11"></p><p>然后开启服务端<br><img src="http://owxsbpjrr.bkt.clouddn.com/89ed6459ebac12dc3714a1cabd4f8f4c.png" alt="22"></p></the>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;excerpt in=&quot;&quot; index=&quot;&quot; |=&quot;&quot; 首页摘要=&quot;&quot;&gt;&lt;br&gt;+
    
    </summary>
    
      <category term="Program" scheme="http://yoursite.com/categories/Program/"/>
    
    
      <category term="GO" scheme="http://yoursite.com/tags/GO/"/>
    
      <category term="程序设计" scheme="http://yoursite.com/tags/%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title>011 始于颜值 陷于才华 忠于人品</title>
    <link href="http://yoursite.com/2017/10/31/011onlyyou/"/>
    <id>http://yoursite.com/2017/10/31/011onlyyou/</id>
    <published>2017-10-31T12:31:01.000Z</published>
    <updated>2017-11-06T12:36:39.008Z</updated>
    
    <content type="html"><![CDATA[<p><excerpt in="" index="" |="" 首页摘要=""><br>+<a id="more"></a></excerpt></p><the rest="" of="" contents="" |="" 余下全文="">    <blockquote class="blockquote-center"><p>始于心动，终于白首，初于花雨，至于天荒！</p></blockquote><p><img src="http://owxsbpjrr.bkt.clouddn.com/f84a8d3e468b7e74fe916c4184f284f6.png" alt="111"></p><p>有人说，爱一个人始于颜值，陷于才华，终于人品。在我看来，不过简单的一句：始于心动，终于心安。心动于颜值，相由心生，亦归结为品格；心动于才华，亦是如此。终于心安，唯真爱方能长久，唯深爱归于平静。愿你的枕边身边一直都是她，从心动到心安，从青丝到白发，从荆棘到百花，从校服到婚纱，一直都是他。</p><p><img src="http://owxsbpjrr.bkt.clouddn.com/91e3b9074b09c35993323cb4e8588afd.png" alt="22"></p><p>想说陪我走走吧，去哪都行，只要你愿意！想说带你去吃饭，你想吃什么我都给你做，新学的红烧排骨很不错，只要你愿意！想说聊聊天吧，虽然我看了好多套路却一套都没学会，只要你愿意！想说想你了，无论是忙还是闲。</p><p><img src="http://owxsbpjrr.bkt.clouddn.com/2102be3133262184563da5647791f9bc.png" alt="33"></p><p>虽然遇到一个自己喜欢和喜欢自己的人很难，但是总该争取的还是要好好争取，望着他人的幸福，徒生向往；注目他人的难处，油然怜悯。他们时而欢笑，时而落泪。因为小事而倍感幸福，因为小事而万分感伤。</p><p>我想，迟早会遇到那个人吧。</p></the>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;excerpt in=&quot;&quot; index=&quot;&quot; |=&quot;&quot; 首页摘要=&quot;&quot;&gt;&lt;br&gt;+
    
    </summary>
    
      <category term="异度空间" scheme="http://yoursite.com/categories/%E5%BC%82%E5%BA%A6%E7%A9%BA%E9%97%B4/"/>
    
    
      <category term="Encounter" scheme="http://yoursite.com/tags/Encounter/"/>
    
  </entry>
  
  <entry>
    <title>Golang中的数组</title>
    <link href="http://yoursite.com/2017/10/30/array/"/>
    <id>http://yoursite.com/2017/10/30/array/</id>
    <published>2017-10-30T14:55:39.000Z</published>
    <updated>2017-11-02T13:48:36.236Z</updated>
    
    <content type="html"><![CDATA[<p><excerpt in="" index="" |="" 首页摘要=""><br>+<a id="more"></a></excerpt></p><the rest="" of="" contents="" |="" 余下全文="">    <h1 id="1-数组"><a href="#1-数组" class="headerlink" title="1.数组"></a>1.数组</h1><h2 id="1-1常见声明："><a href="#1-1常见声明：" class="headerlink" title="1.1常见声明："></a>1.1常见声明：</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">[32]byte                         //长度32的字节数组</div><div class="line">[2*N] struct &#123;x, y int32&#125;       //复杂类型的数组</div><div class="line">[1000]*float64                  //指针数组</div><div class="line">[3][5]int                       //int类型的二维数组</div></pre></td></tr></table></figure><h2 id="1-2元素访问："><a href="#1-2元素访问：" class="headerlink" title="1.2元素访问："></a>1.2元素访问：</h2><p>通过数组下标访问元素。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> i: = 0; i &lt; len(array): i++ &#123;</div><div class="line">fmt.Println(<span class="string">"Element"</span>,i,<span class="string">"of array is"</span>,array[i])</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>Go语言还提供了一个关键字range，用于便捷地遍历容器中的元素。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> i, v := range array &#123;</div><div class="line"> fmt.Println(<span class="string">"Array element["</span>, i, <span class="string">"]="</span>, v)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h2 id="1-3值类型"><a href="#1-3值类型" class="headerlink" title="1.3值类型"></a>1.3值类型</h2><p>在Go语言中数组是一个值类型，所有的值类型变量在赋值和作为参数传递时都将产生一次复制动作。<br> 如果将数组作为函数的参数类型，则在函数调用时参数将发生复制。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">package main</div><div class="line">import <span class="string">"fmt"</span></div><div class="line">func modify(array [10]int) &#123;</div><div class="line">    array[0] = 10 // 试图修改数组的第一个元素</div><div class="line">    fmt.Println(<span class="string">"In modify(), array values:"</span>, array)</div><div class="line">&#125;</div><div class="line">func <span class="function"><span class="title">main</span></span>() &#123;</div><div class="line">    array := [5]int&#123;1,2,3,4,5&#125; // 定义并初始化一个数组</div><div class="line">    modify(array) // 传递给一个函数，并试图在函数体内修改这个数组内容</div><div class="line">    fmt.Println(<span class="string">"In main(), array values:"</span>, array)</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="2-数组切片"><a href="#2-数组切片" class="headerlink" title="2.数组切片"></a>2.数组切片</h1><h2 id="2-1创建数组切片"><a href="#2-1创建数组切片" class="headerlink" title="2.1创建数组切片"></a>2.1创建数组切片</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">mySlice1 := make([]int, 5)</div><div class="line">mySlice2 := make([]int, 5, 10)</div><div class="line">mySlice3 := []int&#123;1, 2, 3, 4, 5&#125;</div></pre></td></tr></table></figure><h2 id="2-2元素遍历"><a href="#2-2元素遍历" class="headerlink" title="2.2元素遍历"></a>2.2元素遍历</h2><p>通过for循环：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> i := 0; i &lt;len(mySlice); i++ &#123;</div><div class="line"> fmt.Println(<span class="string">"mySlice["</span>, i, <span class="string">"] ="</span>, mySlice[i])</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>使用range关键字遍历<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> i, v := range mySlice &#123;</div><div class="line"> fmt.Println(<span class="string">"mySlice["</span>, i, <span class="string">"] ="</span>, v)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h2 id="2-3动态增加元素"><a href="#2-3动态增加元素" class="headerlink" title="2.3动态增加元素"></a>2.3动态增加元素</h2><p>通过内置函数获取切片长度和容量<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">package main</div><div class="line">import <span class="string">"fmt"</span></div><div class="line">func <span class="function"><span class="title">main</span></span>() &#123;</div><div class="line"> mySlice := make([]int, 5, 10)</div><div class="line"> fmt.Println(<span class="string">"len(mySlice):"</span>, len(mySlice))</div><div class="line"> fmt.Println(<span class="string">"cap(mySlice):"</span>, <span class="built_in">cap</span>(mySlice))</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>通过append函数向数组切片中追加元素<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">mySlice = append(mySlice, 1, 2, 3)</div><div class="line">mySlice2 := []int&#123;8, 9, 10&#125;</div><div class="line">// 给mySlice后面添加另一个数组切片</div><div class="line">mySlice = append(mySlice, mySlice2...)</div></pre></td></tr></table></figure></p><h2 id="2-4基于数组切片创建数组切片"><a href="#2-4基于数组切片创建数组切片" class="headerlink" title="2.4基于数组切片创建数组切片"></a>2.4基于数组切片创建数组切片</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">oldSlice := []int&#123;1, 2, 3, 4, 5&#125;</div><div class="line">newSlice := oldSlice[:3] // 基于oldSlice的前3个元素构建新数组切片</div></pre></td></tr></table></figure><h2 id="2-5内容复制"><a href="#2-5内容复制" class="headerlink" title="2.5内容复制"></a>2.5内容复制</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">slice1 := []int&#123;1, 2, 3, 4, 5&#125;</div><div class="line">slice2 := []int&#123;5, 4, 3&#125;</div><div class="line">copy(slice2, slice1) // 只会复制slice1的前3个元素到slice2中</div><div class="line">copy(slice1, slice2) // 只会复制slice2的3个元素到slice1的前3个位置</div></pre></td></tr></table></figure><h2 id="2-6代码示例"><a href="#2-6代码示例" class="headerlink" title="2.6代码示例"></a>2.6代码示例</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">package main</div><div class="line">import <span class="string">"fmt"</span></div><div class="line">func <span class="function"><span class="title">main</span></span>() &#123;</div><div class="line">    // 先定义一个数组</div><div class="line">    var myArray [10]int = [10]int&#123;1, 2, 3, 4, 5, 6, 7, 8, 9, 10&#125;</div><div class="line">    // 基于数组创建一个数组切片</div><div class="line">    var mySlice []int = myArray[:5]</div><div class="line">    fmt.Println(<span class="string">"Elements of myArray: "</span>)</div><div class="line">    <span class="keyword">for</span> _, v := range myArray &#123;</div><div class="line">    fmt.Print(v, <span class="string">" "</span>)</div><div class="line">    &#125;</div><div class="line">    fmt.Println(<span class="string">"\nElements of mySlice: "</span>)</div><div class="line">    <span class="keyword">for</span> _, v := range mySlice &#123;</div><div class="line">    fmt.Print(v, <span class="string">" "</span>)</div><div class="line">    &#125;</div><div class="line">  fmt.Println()</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="3-map"><a href="#3-map" class="headerlink" title="3.map"></a>3.map</h1><h2 id="3-1代码示例"><a href="#3-1代码示例" class="headerlink" title="3.1代码示例"></a>3.1代码示例</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">package main</div><div class="line">import <span class="string">"fmt"</span></div><div class="line">// PersonInfo是一个包含个人详细信息的类型</div><div class="line"><span class="built_in">type</span> PersonInfo struct &#123;</div><div class="line"> ID string</div><div class="line"> Name string</div><div class="line"> Address string</div><div class="line">&#125;</div><div class="line">func <span class="function"><span class="title">main</span></span>() &#123;</div><div class="line">var personDB map[string] PersonInfo</div><div class="line"> personDB = make(map[string] PersonInfo)</div><div class="line"> // 往这个map里插入几条数据</div><div class="line"> personDB[<span class="string">"12345"</span>] = PersonInfo&#123;<span class="string">"12345"</span>, <span class="string">"Tom"</span>, <span class="string">"Room 203,..."</span>&#125;</div><div class="line"> personDB[<span class="string">"1"</span>] = PersonInfo&#123;<span class="string">"1"</span>, <span class="string">"Jack"</span>, <span class="string">"Room 101,..."</span>&#125;</div><div class="line"> // 从这个map查找键为<span class="string">"1234"</span>的信息</div><div class="line"> person, ok := personDB[<span class="string">"1234"</span>]</div><div class="line"></div><div class="line"> // ok是一个返回的bool型，返回<span class="literal">true</span>表示找到了对应的数据</div><div class="line"> <span class="keyword">if</span> ok &#123;</div><div class="line"> fmt.Println(<span class="string">"Found person"</span>, person.Name, <span class="string">"with ID 1234."</span>)</div><div class="line"> &#125; <span class="keyword">else</span> &#123;</div><div class="line"> fmt.Println(<span class="string">"Did not find person with ID 1234."</span>)</div><div class="line"> &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="3-2变量声明"><a href="#3-2变量声明" class="headerlink" title="3.2变量声明"></a>3.2变量声明</h2><p>var myMap map[string] PersonInfo</p><p>3.3创建<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">// PersonInfohi一个结构体</div><div class="line">myMap = make(map[string] PersonInfo)</div><div class="line">创建并初始化map的代码如下：</div><div class="line">myMap = map[string] PersonInfo&#123;</div><div class="line"> <span class="string">"1234"</span>: PersonInfo&#123;<span class="string">"1"</span>, <span class="string">"Jack"</span>, <span class="string">"Room 101,..."</span>&#125;,</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h2 id="3-3元素赋值"><a href="#3-3元素赋值" class="headerlink" title="3.3元素赋值"></a>3.3元素赋值</h2><p>myMap[“1234”] = PersonInfo{“1”, “Jack”, “Room 101,…”}</p><h2 id="3-4元素删除"><a href="#3-4元素删除" class="headerlink" title="3.4元素删除"></a>3.4元素删除</h2><p>delete(myMap, “1234”)</p><h2 id="3-5元素查找"><a href="#3-5元素查找" class="headerlink" title="3.5元素查找"></a>3.5元素查找</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">value, ok := myMap[<span class="string">"1234"</span>]</div><div class="line"><span class="keyword">if</span> ok &#123; // 找到了</div><div class="line"> // 处理找到的value</div><div class="line">&#125;</div></pre></td></tr></table></figure></the>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;excerpt in=&quot;&quot; index=&quot;&quot; |=&quot;&quot; 首页摘要=&quot;&quot;&gt;&lt;br&gt;+
    
    </summary>
    
      <category term="Program" scheme="http://yoursite.com/categories/Program/"/>
    
    
      <category term="GO" scheme="http://yoursite.com/tags/GO/"/>
    
      <category term="程序设计" scheme="http://yoursite.com/tags/%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2017/10/30/hello-world/"/>
    <id>http://yoursite.com/2017/10/30/hello-world/</id>
    <published>2017-10-30T11:29:56.977Z</published>
    <updated>2017-10-31T14:04:29.730Z</updated>
    
    <content type="html"><![CDATA[<p><excerpt in="" index="" |="" 首页摘要=""><br>+<a id="more"></a></excerpt></p><the rest="" of="" contents="" |="" 余下全文="">    <p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p></the>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;excerpt in=&quot;&quot; index=&quot;&quot; |=&quot;&quot; 首页摘要=&quot;&quot;&gt;&lt;br&gt;+
    
    </summary>
    
    
      <category term="First" scheme="http://yoursite.com/tags/First/"/>
    
  </entry>
  
</feed>
