<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>零度空间</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-11-02T12:17:17.516Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Ares</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Golang实现简单的聊天室</title>
    <link href="http://yoursite.com/2017/10/31/chat/"/>
    <id>http://yoursite.com/2017/10/31/chat/</id>
    <published>2017-10-31T14:06:19.000Z</published>
    <updated>2017-11-02T12:17:17.516Z</updated>
    
    <content type="html"><![CDATA[<p><excerpt in="" index="" |="" 首页摘要=""><br>+<a id="more"></a></excerpt></p><the rest="" of="" contents="" |="" 余下全文="">   <p>首先，要实现聊天，就要有一个服务器接收发送到的信息，还有一个客户端向服务器发送信息，所以有两部分代码，一部分是客户端，另一部分是服务端。</p><p><strong>服务端代码</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div></pre></td><td class="code"><pre><div class="line">package main</div><div class="line">import (</div><div class="line"><span class="string">"fmt"</span></div><div class="line"><span class="string">"net"</span></div><div class="line"><span class="string">"os"</span></div><div class="line">)</div><div class="line">//通道</div><div class="line">var clients []net.Conn</div><div class="line"></div><div class="line">func <span class="function"><span class="title">main</span></span>() &#123;</div><div class="line">var (</div><div class="line">host   = <span class="string">"localhost"</span></div><div class="line">port   = <span class="string">"8000"</span></div><div class="line">remote = host + <span class="string">":"</span> + port</div><div class="line">data   = make([]byte, 1024)</div><div class="line">)</div><div class="line">fmt.Println(<span class="string">"Initiating server..."</span>)</div><div class="line"></div><div class="line">lis, err := net.Listen(<span class="string">"tcp"</span>, remote)</div><div class="line">defer lis.Close()</div><div class="line"></div><div class="line"><span class="keyword">if</span> err != nil &#123;</div><div class="line">fmt.Printf(<span class="string">"Error when listen: %s, Err: %s\n"</span>, remote, err)</div><div class="line">os.Exit(-1)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">for</span> &#123;</div><div class="line">var res string</div><div class="line">conn, err := lis.Accept()</div><div class="line"><span class="keyword">if</span> err != nil &#123;</div><div class="line">fmt.Println(<span class="string">"Error accepting client: "</span>, err.Error())</div><div class="line">os.Exit(0)</div><div class="line">&#125;</div><div class="line">clients = append(clients, conn)</div><div class="line"></div><div class="line">go func(con net.Conn) &#123;</div><div class="line">fmt.Println(<span class="string">"New connection: "</span>, con.RemoteAddr())</div><div class="line"></div><div class="line">// Get client<span class="string">'s name</span></div><div class="line"><span class="string">length, err := con.Read(data)</span></div><div class="line"><span class="string">if err != nil &#123;</span></div><div class="line"><span class="string">fmt.Printf("Client %v quit.\n", con.RemoteAddr())</span></div><div class="line"><span class="string">con.Close()</span></div><div class="line"><span class="string">disconnect(con, con.RemoteAddr().String())</span></div><div class="line"><span class="string">return</span></div><div class="line"><span class="string">&#125;</span></div><div class="line"><span class="string">name := string(data[:length])</span></div><div class="line"><span class="string">comeStr := name + " entered the room."</span></div><div class="line"><span class="string">notify(con, comeStr)</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">// Begin recieve message from client</span></div><div class="line"><span class="string">for &#123;</span></div><div class="line"><span class="string">length, err := con.Read(data)</span></div><div class="line"><span class="string">if err != nil &#123;</span></div><div class="line"><span class="string">fmt.Printf("Client %s quit.\n", name)</span></div><div class="line"><span class="string">con.Close()</span></div><div class="line"><span class="string">disconnect(con, name)</span></div><div class="line"><span class="string">return</span></div><div class="line"><span class="string">&#125;</span></div><div class="line"><span class="string">res = string(data[:length])</span></div><div class="line"><span class="string">sprdMsg := name + " said: " + res</span></div><div class="line"><span class="string">fmt.Println(sprdMsg)</span></div><div class="line"><span class="string">res = "You said:" + res</span></div><div class="line"><span class="string">con.Write([]byte(res))</span></div><div class="line"><span class="string">notify(con, sprdMsg)</span></div><div class="line"><span class="string">&#125;</span></div><div class="line"><span class="string">&#125;(conn)</span></div><div class="line"><span class="string">&#125;</span></div><div class="line"><span class="string">&#125;</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">//服务端收到消息后需要通知各个客户端</span></div><div class="line"><span class="string">func notify(conn net.Conn, msg string) &#123;</span></div><div class="line"><span class="string">for _, con := range clients &#123;</span></div><div class="line"><span class="string">if con.RemoteAddr() != conn.RemoteAddr() &#123;</span></div><div class="line"><span class="string">con.Write([]byte(msg))</span></div><div class="line"><span class="string">&#125;</span></div><div class="line"><span class="string">&#125;</span></div><div class="line"><span class="string">&#125;</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">//当有人离开聊天室时，通知所有的用户。</span></div><div class="line"><span class="string">func disconnect(conn net.Conn, name string) &#123;</span></div><div class="line"><span class="string">for index, con := range clients &#123;</span></div><div class="line"><span class="string">if con.RemoteAddr() == conn.RemoteAddr() &#123;</span></div><div class="line"><span class="string">disMsg := name + " has left the room."</span></div><div class="line"><span class="string">fmt.Println(disMsg)</span></div><div class="line"><span class="string">clients = append(clients[:index], clients[index+1:]...)</span></div><div class="line"><span class="string">notify(conn, disMsg)</span></div><div class="line"><span class="string">&#125;</span></div><div class="line"><span class="string">&#125;</span></div><div class="line"><span class="string">&#125;</span></div></pre></td></tr></table></figure></p><p><strong>客户端代码</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div></pre></td><td class="code"><pre><div class="line">package main</div><div class="line"></div><div class="line">import (</div><div class="line"><span class="string">"bufio"</span></div><div class="line"><span class="string">"fmt"</span></div><div class="line"><span class="string">"net"</span></div><div class="line"><span class="string">"os"</span></div><div class="line">)</div><div class="line"></div><div class="line">var writeStr, readStr = make([]byte, 1024), make([]byte, 1024)</div><div class="line"></div><div class="line">func <span class="function"><span class="title">main</span></span>() &#123;</div><div class="line">var (</div><div class="line">host   = <span class="string">"localhost"</span></div><div class="line">port   = <span class="string">"8000"</span></div><div class="line">remote = host + <span class="string">":"</span> + port</div><div class="line">reader = bufio.NewReader(os.Stdin)</div><div class="line">)</div><div class="line"></div><div class="line">con, err := net.Dial(<span class="string">"tcp"</span>, remote)</div><div class="line">defer con.Close()</div><div class="line"></div><div class="line"><span class="keyword">if</span> err != nil &#123;</div><div class="line">fmt.Println(<span class="string">"Server not found."</span>)</div><div class="line">os.Exit(-1)</div><div class="line">&#125;</div><div class="line">fmt.Println(<span class="string">"Connection OK."</span>)</div><div class="line">fmt.Printf(<span class="string">"Enter your name: "</span>)</div><div class="line">fmt.Scanf(<span class="string">"%s"</span>, &amp;writeStr)</div><div class="line"><span class="keyword">in</span>, err := con.Write([]byte(writeStr))</div><div class="line"><span class="keyword">if</span> err != nil &#123;</div><div class="line">fmt.Printf(<span class="string">"Error when send to server: %d\n"</span>, <span class="keyword">in</span>)</div><div class="line">os.Exit(0)</div><div class="line">&#125;</div><div class="line">fmt.Println(<span class="string">"Now begin to talk!"</span>)</div><div class="line">go <span class="built_in">read</span>(con)</div><div class="line"></div><div class="line"><span class="keyword">for</span> &#123;</div><div class="line">writeStr, _, _ = reader.ReadLine()</div><div class="line"><span class="keyword">if</span> string(writeStr) == <span class="string">"quit"</span> &#123;</div><div class="line">fmt.Println(<span class="string">"Communication terminated."</span>)</div><div class="line">os.Exit(1)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">in</span>, err := con.Write([]byte(writeStr))</div><div class="line"><span class="keyword">if</span> err != nil &#123;</div><div class="line">fmt.Printf(<span class="string">"Error when send to server: %d\n"</span>, <span class="keyword">in</span>)</div><div class="line">os.Exit(0)</div><div class="line">&#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">func <span class="built_in">read</span>(conn net.Conn) &#123;</div><div class="line"><span class="keyword">for</span> &#123;</div><div class="line">length, err := conn.Read(readStr)</div><div class="line"><span class="keyword">if</span> err != nil &#123;</div><div class="line">fmt.Printf(<span class="string">"Error when read from server. Error:%s\n"</span>, err)</div><div class="line">os.Exit(0)</div><div class="line">&#125;</div><div class="line">fmt.Println(string(readStr[:length]))</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p><strong>结果见下图</strong><br>先开启服务端<br><img src="http://owxsbpjrr.bkt.clouddn.com/d317b6946309cb11619f661581ba436f.png" alt="11"></p><p>然后开启服务端<br><img src="http://owxsbpjrr.bkt.clouddn.com/89ed6459ebac12dc3714a1cabd4f8f4c.png" alt="22"></p></the>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;excerpt in=&quot;&quot; index=&quot;&quot; |=&quot;&quot; 首页摘要=&quot;&quot;&gt;&lt;br&gt;+
    
    </summary>
    
      <category term="Program" scheme="http://yoursite.com/categories/Program/"/>
    
    
      <category term="GO" scheme="http://yoursite.com/tags/GO/"/>
    
  </entry>
  
  <entry>
    <title>011 始于颜值 陷于才华 忠于人品</title>
    <link href="http://yoursite.com/2017/10/31/011onlyyou/"/>
    <id>http://yoursite.com/2017/10/31/011onlyyou/</id>
    <published>2017-10-31T12:31:01.000Z</published>
    <updated>2017-11-02T12:17:13.045Z</updated>
    
    <content type="html"><![CDATA[<p><excerpt in="" index="" |="" 首页摘要=""><br>+<a id="more"></a></excerpt></p><the rest="" of="" contents="" |="" 余下全文="">    <blockquote class="blockquote-center"><p>始于心动，终于白首，初于花雨，至于天荒！</p></blockquote><p><img src="http://owxsbpjrr.bkt.clouddn.com/f84a8d3e468b7e74fe916c4184f284f6.png" alt="111"></p><p>每天，只有这个时候是最心静的，也只有这个时候是属于我自己的，或许我想什么，说什么你都不会知道吧，喜欢你，可是又不想打扰你，不想让你觉得我烦，很矛盾，不想错过你，又不想烦你，总是说顺其自然，但是又怕顺着顺着又没了， 不善于表达，或许会更难吧。</p><p><img src="http://owxsbpjrr.bkt.clouddn.com/91e3b9074b09c35993323cb4e8588afd.png" alt="22"></p><p>想说陪我走走吧，去哪都行，只要你愿意！想说带你去吃饭，你想吃什么我都给你做，新学的红烧排骨很不错，只要你愿意！想说聊聊天吧，虽然我看了好多套路却一套都没学会，只要你愿意！想说想你了，无论是忙还是闲。</p><p><img src="http://owxsbpjrr.bkt.clouddn.com/2102be3133262184563da5647791f9bc.png" alt="33"></p><p>虽然遇到一个自己喜欢和喜欢自己的人很难，但是总该争取的还是要好好争取，望着他人的幸福，徒生向往；注目他人的难处，油然怜悯。他们时而欢笑，时而落泪。因为小事而倍感幸福，因为小事而万分感伤。希望我们还会再相遇吧！</p></the>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;excerpt in=&quot;&quot; index=&quot;&quot; |=&quot;&quot; 首页摘要=&quot;&quot;&gt;&lt;br&gt;+
    
    </summary>
    
      <category term="异度空间" scheme="http://yoursite.com/categories/%E5%BC%82%E5%BA%A6%E7%A9%BA%E9%97%B4/"/>
    
    
      <category term="Encounter" scheme="http://yoursite.com/tags/Encounter/"/>
    
  </entry>
  
  <entry>
    <title>Golang中的数组</title>
    <link href="http://yoursite.com/2017/10/30/array/"/>
    <id>http://yoursite.com/2017/10/30/array/</id>
    <published>2017-10-30T14:55:39.000Z</published>
    <updated>2017-11-02T12:17:15.333Z</updated>
    
    <content type="html"><![CDATA[<p><excerpt in="" index="" |="" 首页摘要=""><br>+<a id="more"></a></excerpt></p><the rest="" of="" contents="" |="" 余下全文="">    <h1 id="1-数组"><a href="#1-数组" class="headerlink" title="1.数组"></a>1.数组</h1><h2 id="1-1常见声明："><a href="#1-1常见声明：" class="headerlink" title="1.1常见声明："></a>1.1常见声明：</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">[32]byte                         //长度32的字节数组</div><div class="line">[2*N] struct &#123;x, y int32&#125;       //复杂类型的数组</div><div class="line">[1000]*float64                  //指针数组</div><div class="line">[3][5]int                       //int类型的二维数组</div></pre></td></tr></table></figure><h2 id="1-2元素访问："><a href="#1-2元素访问：" class="headerlink" title="1.2元素访问："></a>1.2元素访问：</h2><p>通过数组下标访问元素。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> i: = 0; i &lt; len(array): i++ &#123;</div><div class="line">fmt.Println(<span class="string">"Element"</span>,i,<span class="string">"of array is"</span>,array[i])</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>Go语言还提供了一个关键字range，用于便捷地遍历容器中的元素。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> i, v := range array &#123;</div><div class="line"> fmt.Println(<span class="string">"Array element["</span>, i, <span class="string">"]="</span>, v)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h2 id="1-3值类型"><a href="#1-3值类型" class="headerlink" title="1.3值类型"></a>1.3值类型</h2><p>在Go语言中数组是一个值类型，所有的值类型变量在赋值和作为参数传递时都将产生一次复制动作。<br> 如果将数组作为函数的参数类型，则在函数调用时参数将发生复制。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">package main</div><div class="line">import <span class="string">"fmt"</span></div><div class="line">func modify(array [10]int) &#123;</div><div class="line">    array[0] = 10 // 试图修改数组的第一个元素</div><div class="line">    fmt.Println(<span class="string">"In modify(), array values:"</span>, array)</div><div class="line">&#125;</div><div class="line">func <span class="function"><span class="title">main</span></span>() &#123;</div><div class="line">    array := [5]int&#123;1,2,3,4,5&#125; // 定义并初始化一个数组</div><div class="line">    modify(array) // 传递给一个函数，并试图在函数体内修改这个数组内容</div><div class="line">    fmt.Println(<span class="string">"In main(), array values:"</span>, array)</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="2-数组切片"><a href="#2-数组切片" class="headerlink" title="2.数组切片"></a>2.数组切片</h1><h2 id="2-1创建数组切片"><a href="#2-1创建数组切片" class="headerlink" title="2.1创建数组切片"></a>2.1创建数组切片</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">mySlice1 := make([]int, 5)</div><div class="line">mySlice2 := make([]int, 5, 10)</div><div class="line">mySlice3 := []int&#123;1, 2, 3, 4, 5&#125;</div></pre></td></tr></table></figure><h2 id="2-2元素遍历"><a href="#2-2元素遍历" class="headerlink" title="2.2元素遍历"></a>2.2元素遍历</h2><p>通过for循环：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> i := 0; i &lt;len(mySlice); i++ &#123;</div><div class="line"> fmt.Println(<span class="string">"mySlice["</span>, i, <span class="string">"] ="</span>, mySlice[i])</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>使用range关键字遍历<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> i, v := range mySlice &#123;</div><div class="line"> fmt.Println(<span class="string">"mySlice["</span>, i, <span class="string">"] ="</span>, v)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h2 id="2-3动态增加元素"><a href="#2-3动态增加元素" class="headerlink" title="2.3动态增加元素"></a>2.3动态增加元素</h2><p>通过内置函数获取切片长度和容量<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">package main</div><div class="line">import <span class="string">"fmt"</span></div><div class="line">func <span class="function"><span class="title">main</span></span>() &#123;</div><div class="line"> mySlice := make([]int, 5, 10)</div><div class="line"> fmt.Println(<span class="string">"len(mySlice):"</span>, len(mySlice))</div><div class="line"> fmt.Println(<span class="string">"cap(mySlice):"</span>, <span class="built_in">cap</span>(mySlice))</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>通过append函数向数组切片中追加元素<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">mySlice = append(mySlice, 1, 2, 3)</div><div class="line">mySlice2 := []int&#123;8, 9, 10&#125;</div><div class="line">// 给mySlice后面添加另一个数组切片</div><div class="line">mySlice = append(mySlice, mySlice2...)</div></pre></td></tr></table></figure></p><h2 id="2-4基于数组切片创建数组切片"><a href="#2-4基于数组切片创建数组切片" class="headerlink" title="2.4基于数组切片创建数组切片"></a>2.4基于数组切片创建数组切片</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">oldSlice := []int&#123;1, 2, 3, 4, 5&#125;</div><div class="line">newSlice := oldSlice[:3] // 基于oldSlice的前3个元素构建新数组切片</div></pre></td></tr></table></figure><h2 id="2-5内容复制"><a href="#2-5内容复制" class="headerlink" title="2.5内容复制"></a>2.5内容复制</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">slice1 := []int&#123;1, 2, 3, 4, 5&#125;</div><div class="line">slice2 := []int&#123;5, 4, 3&#125;</div><div class="line">copy(slice2, slice1) // 只会复制slice1的前3个元素到slice2中</div><div class="line">copy(slice1, slice2) // 只会复制slice2的3个元素到slice1的前3个位置</div></pre></td></tr></table></figure><h2 id="2-6代码示例"><a href="#2-6代码示例" class="headerlink" title="2.6代码示例"></a>2.6代码示例</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">package main</div><div class="line">import <span class="string">"fmt"</span></div><div class="line">func <span class="function"><span class="title">main</span></span>() &#123;</div><div class="line">    // 先定义一个数组</div><div class="line">    var myArray [10]int = [10]int&#123;1, 2, 3, 4, 5, 6, 7, 8, 9, 10&#125;</div><div class="line">    // 基于数组创建一个数组切片</div><div class="line">    var mySlice []int = myArray[:5]</div><div class="line">    fmt.Println(<span class="string">"Elements of myArray: "</span>)</div><div class="line">    <span class="keyword">for</span> _, v := range myArray &#123;</div><div class="line">    fmt.Print(v, <span class="string">" "</span>)</div><div class="line">    &#125;</div><div class="line">    fmt.Println(<span class="string">"\nElements of mySlice: "</span>)</div><div class="line">    <span class="keyword">for</span> _, v := range mySlice &#123;</div><div class="line">    fmt.Print(v, <span class="string">" "</span>)</div><div class="line">    &#125;</div><div class="line">  fmt.Println()</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="3-map"><a href="#3-map" class="headerlink" title="3.map"></a>3.map</h1><h2 id="3-1代码示例"><a href="#3-1代码示例" class="headerlink" title="3.1代码示例"></a>3.1代码示例</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">package main</div><div class="line">import <span class="string">"fmt"</span></div><div class="line">// PersonInfo是一个包含个人详细信息的类型</div><div class="line"><span class="built_in">type</span> PersonInfo struct &#123;</div><div class="line"> ID string</div><div class="line"> Name string</div><div class="line"> Address string</div><div class="line">&#125;</div><div class="line">func <span class="function"><span class="title">main</span></span>() &#123;</div><div class="line">var personDB map[string] PersonInfo</div><div class="line"> personDB = make(map[string] PersonInfo)</div><div class="line"> // 往这个map里插入几条数据</div><div class="line"> personDB[<span class="string">"12345"</span>] = PersonInfo&#123;<span class="string">"12345"</span>, <span class="string">"Tom"</span>, <span class="string">"Room 203,..."</span>&#125;</div><div class="line"> personDB[<span class="string">"1"</span>] = PersonInfo&#123;<span class="string">"1"</span>, <span class="string">"Jack"</span>, <span class="string">"Room 101,..."</span>&#125;</div><div class="line"> // 从这个map查找键为<span class="string">"1234"</span>的信息</div><div class="line"> person, ok := personDB[<span class="string">"1234"</span>]</div><div class="line"></div><div class="line"> // ok是一个返回的bool型，返回<span class="literal">true</span>表示找到了对应的数据</div><div class="line"> <span class="keyword">if</span> ok &#123;</div><div class="line"> fmt.Println(<span class="string">"Found person"</span>, person.Name, <span class="string">"with ID 1234."</span>)</div><div class="line"> &#125; <span class="keyword">else</span> &#123;</div><div class="line"> fmt.Println(<span class="string">"Did not find person with ID 1234."</span>)</div><div class="line"> &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="3-2变量声明"><a href="#3-2变量声明" class="headerlink" title="3.2变量声明"></a>3.2变量声明</h2><p>var myMap map[string] PersonInfo</p><p>3.3创建<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">// PersonInfohi一个结构体</div><div class="line">myMap = make(map[string] PersonInfo)</div><div class="line">创建并初始化map的代码如下：</div><div class="line">myMap = map[string] PersonInfo&#123;</div><div class="line"> <span class="string">"1234"</span>: PersonInfo&#123;<span class="string">"1"</span>, <span class="string">"Jack"</span>, <span class="string">"Room 101,..."</span>&#125;,</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h2 id="3-3元素赋值"><a href="#3-3元素赋值" class="headerlink" title="3.3元素赋值"></a>3.3元素赋值</h2><p>myMap[“1234”] = PersonInfo{“1”, “Jack”, “Room 101,…”}</p><h2 id="3-4元素删除"><a href="#3-4元素删除" class="headerlink" title="3.4元素删除"></a>3.4元素删除</h2><p>delete(myMap, “1234”)</p><h2 id="3-5元素查找"><a href="#3-5元素查找" class="headerlink" title="3.5元素查找"></a>3.5元素查找</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">value, ok := myMap[<span class="string">"1234"</span>]</div><div class="line"><span class="keyword">if</span> ok &#123; // 找到了</div><div class="line"> // 处理找到的value</div><div class="line">&#125;</div></pre></td></tr></table></figure></the>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;excerpt in=&quot;&quot; index=&quot;&quot; |=&quot;&quot; 首页摘要=&quot;&quot;&gt;&lt;br&gt;+
    
    </summary>
    
      <category term="Program" scheme="http://yoursite.com/categories/Program/"/>
    
    
      <category term="GO" scheme="http://yoursite.com/tags/GO/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2017/10/30/hello-world/"/>
    <id>http://yoursite.com/2017/10/30/hello-world/</id>
    <published>2017-10-30T11:29:56.977Z</published>
    <updated>2017-10-31T14:04:29.730Z</updated>
    
    <content type="html"><![CDATA[<p><excerpt in="" index="" |="" 首页摘要=""><br>+<a id="more"></a></excerpt></p><the rest="" of="" contents="" |="" 余下全文="">    <p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p></the>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;excerpt in=&quot;&quot; index=&quot;&quot; |=&quot;&quot; 首页摘要=&quot;&quot;&gt;&lt;br&gt;+
    
    </summary>
    
    
      <category term="First" scheme="http://yoursite.com/tags/First/"/>
    
  </entry>
  
</feed>
